{
  "api/AeroSharp.ClientProviderBuilder.html": {
    "href": "api/AeroSharp.ClientProviderBuilder.html",
    "title": "Class ClientProviderBuilder | AeroSharp",
    "keywords": "Class ClientProviderBuilder Configures and builds an IClientProvider Inheritance System.Object ClientProviderBuilder Implements IConnectionBuilderNeedingContext IConnectionBuilderNeedingCredentials IConnectionBuilder Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public class ClientProviderBuilder : object, IConnectionBuilderNeedingContext, IConnectionBuilderNeedingCredentials, IConnectionBuilder Methods | Improve this Doc View Source Build() Builds an IClientProvider . Declaration public IClientProvider Build() Returns Type Description IClientProvider An IClientProvider | Improve this Doc View Source Configure() Configure a new IClientProvider / Declaration public static IConnectionBuilderNeedingContext Configure() Returns Type Description IConnectionBuilderNeedingContext A IConnectionBuilderNeedingContext | Improve this Doc View Source WithBootstrapServers(String[]) Use the provided bootstrap servers and the default port (3000). Declaration public IConnectionBuilderNeedingCredentials WithBootstrapServers(string[] bootstrapServers) Parameters Type Name Description System.String [] bootstrapServers Urls to Aerospike cluster nodes to connect to. Returns Type Description IConnectionBuilderNeedingCredentials An instance of the next builder. | Improve this Doc View Source WithConfiguration(ConnectionConfiguration) Optional. Use the provided ConnectionConfiguration . If no configuration is specified (i.e. this is never called) a default configuration will be used. Declaration public IConnectionBuilder WithConfiguration(ConnectionConfiguration configuration) Parameters Type Name Description ConnectionConfiguration configuration The ConnectionConfiguration to use. Returns Type Description IConnectionBuilder This builder. | Improve this Doc View Source WithContext(ConnectionContext) Use the provided ConnectionContext to build a client provider. Declaration public IConnectionBuilderNeedingCredentials WithContext(ConnectionContext connectionContext) Parameters Type Name Description ConnectionContext connectionContext A connection object containing information needed to establish a connection to Aerospike. Returns Type Description IConnectionBuilderNeedingCredentials An instance of the next builder. | Improve this Doc View Source WithoutCredentials() Configure the client to connect without using credentials. Declaration public IConnectionBuilder WithoutCredentials() Returns Type Description IConnectionBuilder A IConnectionBuilder . | Improve this Doc View Source WithUsernameAndPassword(String, String) Use the provided username and password. Declaration public IConnectionBuilder WithUsernameAndPassword(string username, string password) Parameters Type Name Description System.String username The username. System.String password The password Returns Type Description IConnectionBuilder A IConnectionBuilder . Implements IConnectionBuilderNeedingContext IConnectionBuilderNeedingCredentials IConnectionBuilder"
  },
  "api/AeroSharp.Compression.html": {
    "href": "api/AeroSharp.Compression.html",
    "title": "Namespace AeroSharp.Compression | AeroSharp",
    "keywords": "Namespace AeroSharp.Compression Interfaces ICompressor"
  },
  "api/AeroSharp.Compression.ICompressor.html": {
    "href": "api/AeroSharp.Compression.ICompressor.html",
    "title": "Interface ICompressor | AeroSharp",
    "keywords": "Interface ICompressor Namespace : AeroSharp.Compression Assembly : AeroSharp.dll Syntax public interface ICompressor Methods | Improve this Doc View Source Compress(Byte[]) Declaration byte[] Compress(byte[] data) Parameters Type Name Description System.Byte [] data Returns Type Description System.Byte [] | Improve this Doc View Source Decompress(Byte[]) Declaration byte[] Decompress(byte[] data) Parameters Type Name Description System.Byte [] data Returns Type Description System.Byte []"
  },
  "api/AeroSharp.Connection.ClientWrapper.html": {
    "href": "api/AeroSharp.Connection.ClientWrapper.html",
    "title": "Class ClientWrapper | AeroSharp",
    "keywords": "Class ClientWrapper Inheritance System.Object ClientWrapper Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public class ClientWrapper : object Constructors | Improve this Doc View Source ClientWrapper(IAsyncClient) Declaration public ClientWrapper(IAsyncClient client) Parameters Type Name Description IAsyncClient client Properties | Improve this Doc View Source ClientNodes Declaration public Node[] ClientNodes { get; } Property Value Type Description Node []"
  },
  "api/AeroSharp.Connection.ConnectionConfiguration.html": {
    "href": "api/AeroSharp.Connection.ConnectionConfiguration.html",
    "title": "Class ConnectionConfiguration | AeroSharp",
    "keywords": "Class ConnectionConfiguration Represents configuration for connecting to Aerospike. Inheritance System.Object ConnectionConfiguration Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public class ConnectionConfiguration : object Constructors | Improve this Doc View Source ConnectionConfiguration() Default constructor. Declaration public ConnectionConfiguration() Properties | Improve this Doc View Source AsyncMaxCommands The maximum number of asynchronous commands running at once. Declaration public int AsyncMaxCommands { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionTimeout The max amount of time to wait to connect to Aerospike. Declaration public TimeSpan ConnectionTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source MaxCommandAction Defines how to handle cases when the maximum number of concurrent database commands has been exceeded for the async client. Declaration public MaxCommandAction MaxCommandAction { get; set; } Property Value Type Description MaxCommandAction | Improve this Doc View Source MaxConnsPerNode The maximum sync connections per node. Declaration public int MaxConnsPerNode { get; set; } Property Value Type Description System.Int32"
  },
  "api/AeroSharp.Connection.ConnectionContext.html": {
    "href": "api/AeroSharp.Connection.ConnectionContext.html",
    "title": "Class ConnectionContext | AeroSharp",
    "keywords": "Class ConnectionContext A connection object containing information needed to establish a connection to Aerospike. Inheritance System.Object ConnectionContext Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public class ConnectionContext : object Constructors | Improve this Doc View Source ConnectionContext(String[]) A connection object containing information needed to establish a connection to Aerospike. Declaration public ConnectionContext(string[] bootstrapServers) Parameters Type Name Description System.String [] bootstrapServers Urls to Aerospike cluster nodes | Improve this Doc View Source ConnectionContext(String[], Int32) A connection object containing information needed to establish a connection to Aerospike. Declaration public ConnectionContext(string[] bootstrapServers, int port) Parameters Type Name Description System.String [] bootstrapServers Urls to Aerospike cluster nodes System.Int32 port Aerospike connection port Properties | Improve this Doc View Source BootstrapServers Urls to Aerospike cluster nodes Declaration public string[] BootstrapServers { get; } Property Value Type Description System.String [] | Improve this Doc View Source Port Aerospike Port Declaration public int Port { get; } Property Value Type Description System.Int32"
  },
  "api/AeroSharp.Connection.Credentials.html": {
    "href": "api/AeroSharp.Connection.Credentials.html",
    "title": "Class Credentials | AeroSharp",
    "keywords": "Class Credentials Inheritance System.Object Credentials Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public class Credentials : object Constructors | Improve this Doc View Source Credentials(String, String) Declaration public Credentials(string username, string password) Parameters Type Name Description System.String username System.String password Fields | Improve this Doc View Source Empty Declaration public static readonly Credentials Empty Field Value Type Description Credentials Properties | Improve this Doc View Source Password Declaration public string Password { get; } Property Value Type Description System.String | Improve this Doc View Source Username Declaration public string Username { get; } Property Value Type Description System.String"
  },
  "api/AeroSharp.Connection.html": {
    "href": "api/AeroSharp.Connection.html",
    "title": "Namespace AeroSharp.Connection | AeroSharp",
    "keywords": "Namespace AeroSharp.Connection Classes ClientWrapper ConnectionConfiguration Represents configuration for connecting to Aerospike. ConnectionContext A connection object containing information needed to establish a connection to Aerospike. Credentials Interfaces IClientProvider IConnectionBuilder Builds a client provider. IConnectionBuilderNeedingContext Configures a connection. IConnectionBuilderNeedingCredentials Configures connection credentials."
  },
  "api/AeroSharp.Connection.IClientProvider.html": {
    "href": "api/AeroSharp.Connection.IClientProvider.html",
    "title": "Interface IClientProvider | AeroSharp",
    "keywords": "Interface IClientProvider Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public interface IClientProvider Methods | Improve this Doc View Source GetClient() Provides a ClientWrapper for the Aerospike client. Declaration ClientWrapper GetClient() Returns Type Description ClientWrapper A ClientWrapper"
  },
  "api/AeroSharp.Connection.IConnectionBuilder.html": {
    "href": "api/AeroSharp.Connection.IConnectionBuilder.html",
    "title": "Interface IConnectionBuilder | AeroSharp",
    "keywords": "Interface IConnectionBuilder Builds a client provider. Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public interface IConnectionBuilder Methods | Improve this Doc View Source Build() Builds an IClientProvider . Declaration IClientProvider Build() Returns Type Description IClientProvider An IClientProvider | Improve this Doc View Source WithConfiguration(ConnectionConfiguration) Optional. Use the provided ConnectionConfiguration . If no configuration is specified (i.e. this is never called) a default configuration will be used. Declaration IConnectionBuilder WithConfiguration(ConnectionConfiguration configuration) Parameters Type Name Description ConnectionConfiguration configuration The ConnectionConfiguration to use. Returns Type Description IConnectionBuilder This builder."
  },
  "api/AeroSharp.Connection.IConnectionBuilderNeedingContext.html": {
    "href": "api/AeroSharp.Connection.IConnectionBuilderNeedingContext.html",
    "title": "Interface IConnectionBuilderNeedingContext | AeroSharp",
    "keywords": "Interface IConnectionBuilderNeedingContext Configures a connection. Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public interface IConnectionBuilderNeedingContext Methods | Improve this Doc View Source WithBootstrapServers(String[]) Use the provided bootstrap servers and the default port (3000). Declaration IConnectionBuilderNeedingCredentials WithBootstrapServers(string[] bootstrapServers) Parameters Type Name Description System.String [] bootstrapServers Urls to Aerospike cluster nodes to connect to. Returns Type Description IConnectionBuilderNeedingCredentials An instance of the next builder. | Improve this Doc View Source WithContext(ConnectionContext) Use the provided ConnectionContext to build a client provider. Declaration IConnectionBuilderNeedingCredentials WithContext(ConnectionContext connectionContext) Parameters Type Name Description ConnectionContext connectionContext A connection object containing information needed to establish a connection to Aerospike. Returns Type Description IConnectionBuilderNeedingCredentials An instance of the next builder."
  },
  "api/AeroSharp.Connection.IConnectionBuilderNeedingCredentials.html": {
    "href": "api/AeroSharp.Connection.IConnectionBuilderNeedingCredentials.html",
    "title": "Interface IConnectionBuilderNeedingCredentials | AeroSharp",
    "keywords": "Interface IConnectionBuilderNeedingCredentials Configures connection credentials. Namespace : AeroSharp.Connection Assembly : AeroSharp.dll Syntax public interface IConnectionBuilderNeedingCredentials Methods | Improve this Doc View Source WithoutCredentials() Configure the client to connect without using credentials. Declaration IConnectionBuilder WithoutCredentials() Returns Type Description IConnectionBuilder A IConnectionBuilder . | Improve this Doc View Source WithUsernameAndPassword(String, String) Use the provided username and password. Declaration IConnectionBuilder WithUsernameAndPassword(string username, string password) Parameters Type Name Description System.String username The username. System.String password The password Returns Type Description IConnectionBuilder A IConnectionBuilder ."
  },
  "api/AeroSharp.DataAccess.Configuration.html": {
    "href": "api/AeroSharp.DataAccess.Configuration.html",
    "title": "Namespace AeroSharp.DataAccess.Configuration | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.Configuration Interfaces ICompressorBuilder<TNextBuilder> Builds a compressor that compresses bytes following serialization. IDataContextBuilder<TNextBuilder> Builds a data access context. IOverridable<TDataAccessObject, TConfiguration> ISerializerBuilder<TNextBuilder> Builds a serializer."
  },
  "api/AeroSharp.DataAccess.Configuration.ICompressorBuilder-1.html": {
    "href": "api/AeroSharp.DataAccess.Configuration.ICompressorBuilder-1.html",
    "title": "Interface ICompressorBuilder<TNextBuilder> | AeroSharp",
    "keywords": "Interface ICompressorBuilder<TNextBuilder> Builds a compressor that compresses bytes following serialization. Namespace : AeroSharp.DataAccess.Configuration Assembly : AeroSharp.dll Syntax public interface ICompressorBuilder<TNextBuilder> Type Parameters Name Description TNextBuilder The type of the next builder. Methods | Improve this Doc View Source UseLZ4() Uses the default AeroSharp.Compression.LZ4Compressor . Declaration TNextBuilder UseLZ4() Returns Type Description TNextBuilder An instance of the next builder. | Improve this Doc View Source WithCompressor(ICompressor) Use a provided instance of an ICompressor . Declaration TNextBuilder WithCompressor(ICompressor compressor) Parameters Type Name Description ICompressor compressor The ICompressor instance. Returns Type Description TNextBuilder An instance of the next builder."
  },
  "api/AeroSharp.DataAccess.Configuration.IDataContextBuilder-1.html": {
    "href": "api/AeroSharp.DataAccess.Configuration.IDataContextBuilder-1.html",
    "title": "Interface IDataContextBuilder<TNextBuilder> | AeroSharp",
    "keywords": "Interface IDataContextBuilder<TNextBuilder> Builds a data access context. Namespace : AeroSharp.DataAccess.Configuration Assembly : AeroSharp.dll Syntax public interface IDataContextBuilder<TNextBuilder> Type Parameters Name Description TNextBuilder The type of the next builder. Methods | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration TNextBuilder WithDataContext(DataContext dataContext) Parameters Type Name Description DataContext dataContext The DataContext to use. Returns Type Description TNextBuilder An instance of the next builder."
  },
  "api/AeroSharp.DataAccess.Configuration.IOverridable-2.html": {
    "href": "api/AeroSharp.DataAccess.Configuration.IOverridable-2.html",
    "title": "Interface IOverridable<TDataAccessObject, TConfiguration> | AeroSharp",
    "keywords": "Interface IOverridable<TDataAccessObject, TConfiguration> Namespace : AeroSharp.DataAccess.Configuration Assembly : AeroSharp.dll Syntax public interface IOverridable<TDataAccessObject, TConfiguration> Type Parameters Name Description TDataAccessObject TConfiguration Methods | Improve this Doc View Source Override(Func<TConfiguration, TConfiguration>) Declaration TDataAccessObject Override(Func<TConfiguration, TConfiguration> configOverride) Parameters Type Name Description Func <TConfiguration, TConfiguration> configOverride Returns Type Description TDataAccessObject"
  },
  "api/AeroSharp.DataAccess.Configuration.ISerializerBuilder-1.html": {
    "href": "api/AeroSharp.DataAccess.Configuration.ISerializerBuilder-1.html",
    "title": "Interface ISerializerBuilder<TNextBuilder> | AeroSharp",
    "keywords": "Interface ISerializerBuilder<TNextBuilder> Builds a serializer. Namespace : AeroSharp.DataAccess.Configuration Assembly : AeroSharp.dll Syntax public interface ISerializerBuilder<TNextBuilder> Type Parameters Name Description TNextBuilder The type of the next builder. Methods | Improve this Doc View Source UseMessagePackSerializer() Use the built-in AeroSharp.Serialization.MessagePackSerializer . Declaration TNextBuilder UseMessagePackSerializer() Returns Type Description TNextBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializerWithLz4Compression() Use the built-in AeroSharp.Serialization.MessagePackSerializerWithCompression . Declaration TNextBuilder UseMessagePackSerializerWithLz4Compression() Returns Type Description TNextBuilder An instance of the next builder. | Improve this Doc View Source UseProtobufSerializer() Use the default AeroSharp.Serialization.ProtobufSerializer . Declaration TNextBuilder UseProtobufSerializer() Returns Type Description TNextBuilder An instance of the next builder. | Improve this Doc View Source WithSerializer(ISerializer) Use a provided instance of an ISerializer . Declaration TNextBuilder WithSerializer(ISerializer serializer) Parameters Type Name Description ISerializer serializer The ISerializer instance. Returns Type Description TNextBuilder An instance of the next builder."
  },
  "api/AeroSharp.DataAccess.DataContext.html": {
    "href": "api/AeroSharp.DataAccess.DataContext.html",
    "title": "Class DataContext | AeroSharp",
    "keywords": "Class DataContext Inheritance System.Object DataContext Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public class DataContext : object Constructors | Improve this Doc View Source DataContext(String, String) Declaration public DataContext(string namespace, string set) Parameters Type Name Description System.String namespace System.String set Properties | Improve this Doc View Source Namespace Declaration public string Namespace { get; } Property Value Type Description System.String | Improve this Doc View Source Set Declaration public string Set { get; } Property Value Type Description System.String"
  },
  "api/AeroSharp.DataAccess.Exceptions.BinNotFoundException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.BinNotFoundException.html",
    "title": "Class BinNotFoundException | AeroSharp",
    "keywords": "Class BinNotFoundException Exception thrown when a bin is not found in a record. Inheritance System.Object BinNotFoundException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public sealed class BinNotFoundException : Exception Constructors | Improve this Doc View Source BinNotFoundException() Declaration public BinNotFoundException() | Improve this Doc View Source BinNotFoundException(String) Declaration public BinNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source BinNotFoundException(String, Exception) Declaration public BinNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.BinTypeMismatchException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.BinTypeMismatchException.html",
    "title": "Class BinTypeMismatchException | AeroSharp",
    "keywords": "Class BinTypeMismatchException Inheritance System.Object BinTypeMismatchException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class BinTypeMismatchException : Exception Constructors | Improve this Doc View Source BinTypeMismatchException() Declaration public BinTypeMismatchException() | Improve this Doc View Source BinTypeMismatchException(String) Declaration public BinTypeMismatchException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source BinTypeMismatchException(String, Exception) Declaration public BinTypeMismatchException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.ConfigurationException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.ConfigurationException.html",
    "title": "Class ConfigurationException | AeroSharp",
    "keywords": "Class ConfigurationException Inheritance System.Object ConfigurationException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class ConfigurationException : Exception Constructors | Improve this Doc View Source ConfigurationException() Declaration public ConfigurationException() | Improve this Doc View Source ConfigurationException(String) Declaration public ConfigurationException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source ConfigurationException(String, Exception) Declaration public ConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.DeserializationException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.DeserializationException.html",
    "title": "Class DeserializationException | AeroSharp",
    "keywords": "Class DeserializationException Exception for when a there is a deserialization exception. Inheritance System.Object DeserializationException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class DeserializationException : Exception Constructors | Improve this Doc View Source DeserializationException() Declaration public DeserializationException() | Improve this Doc View Source DeserializationException(String) Declaration public DeserializationException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source DeserializationException(String, Exception) Declaration public DeserializationException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.html",
    "title": "Namespace AeroSharp.DataAccess.Exceptions | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.Exceptions Classes BinNotFoundException Exception thrown when a bin is not found in a record. BinTypeMismatchException ConfigurationException DeserializationException Exception for when a there is a deserialization exception. IndexedOperationFailedException KeyAlreadyExistsException MapEntryAlreadyExistsException An exception that is thrown when a map entry already exists and the map policy is set to create only. MapEntryNotFoundException An exception that is thrown when a map entry does not exist and the map policy is set to update only. OperationFailedException RecordNotFoundException UnableToConnectException UnexpectedDataFormatException Exception for when the data from Aerospike cannot be properly cast to a byte array. UnsupportedKeyTypeException Exception thrown when a map key is not of the correct type."
  },
  "api/AeroSharp.DataAccess.Exceptions.IndexedOperationFailedException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.IndexedOperationFailedException.html",
    "title": "Class IndexedOperationFailedException | AeroSharp",
    "keywords": "Class IndexedOperationFailedException Inheritance System.Object IndexedOperationFailedException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class IndexedOperationFailedException : Exception Constructors | Improve this Doc View Source IndexedOperationFailedException() Declaration public IndexedOperationFailedException() | Improve this Doc View Source IndexedOperationFailedException(String) Declaration public IndexedOperationFailedException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source IndexedOperationFailedException(String, Exception) Declaration public IndexedOperationFailedException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.KeyAlreadyExistsException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.KeyAlreadyExistsException.html",
    "title": "Class KeyAlreadyExistsException | AeroSharp",
    "keywords": "Class KeyAlreadyExistsException Inheritance System.Object KeyAlreadyExistsException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class KeyAlreadyExistsException : Exception Constructors | Improve this Doc View Source KeyAlreadyExistsException() Declaration public KeyAlreadyExistsException() | Improve this Doc View Source KeyAlreadyExistsException(String) Declaration public KeyAlreadyExistsException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source KeyAlreadyExistsException(String, Exception) Declaration public KeyAlreadyExistsException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.MapEntryAlreadyExistsException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.MapEntryAlreadyExistsException.html",
    "title": "Class MapEntryAlreadyExistsException | AeroSharp",
    "keywords": "Class MapEntryAlreadyExistsException An exception that is thrown when a map entry already exists and the map policy is set to create only. Inheritance System.Object MapEntryAlreadyExistsException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public sealed class MapEntryAlreadyExistsException : Exception Constructors | Improve this Doc View Source MapEntryAlreadyExistsException() Declaration public MapEntryAlreadyExistsException() | Improve this Doc View Source MapEntryAlreadyExistsException(String) Declaration public MapEntryAlreadyExistsException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source MapEntryAlreadyExistsException(String, Exception) Declaration public MapEntryAlreadyExistsException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.MapEntryNotFoundException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.MapEntryNotFoundException.html",
    "title": "Class MapEntryNotFoundException | AeroSharp",
    "keywords": "Class MapEntryNotFoundException An exception that is thrown when a map entry does not exist and the map policy is set to update only. Inheritance System.Object MapEntryNotFoundException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public sealed class MapEntryNotFoundException : Exception Constructors | Improve this Doc View Source MapEntryNotFoundException() Declaration public MapEntryNotFoundException() | Improve this Doc View Source MapEntryNotFoundException(String) Declaration public MapEntryNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source MapEntryNotFoundException(String, Exception) Declaration public MapEntryNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.OperationFailedException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.OperationFailedException.html",
    "title": "Class OperationFailedException | AeroSharp",
    "keywords": "Class OperationFailedException Inheritance System.Object OperationFailedException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class OperationFailedException : Exception Constructors | Improve this Doc View Source OperationFailedException() Declaration public OperationFailedException() | Improve this Doc View Source OperationFailedException(String) Declaration public OperationFailedException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source OperationFailedException(String, Exception) Declaration public OperationFailedException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.RecordNotFoundException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.RecordNotFoundException.html",
    "title": "Class RecordNotFoundException | AeroSharp",
    "keywords": "Class RecordNotFoundException Inheritance System.Object RecordNotFoundException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class RecordNotFoundException : Exception Constructors | Improve this Doc View Source RecordNotFoundException() Declaration public RecordNotFoundException() | Improve this Doc View Source RecordNotFoundException(String) Declaration public RecordNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source RecordNotFoundException(String, Exception) Declaration public RecordNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.UnableToConnectException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.UnableToConnectException.html",
    "title": "Class UnableToConnectException | AeroSharp",
    "keywords": "Class UnableToConnectException Inheritance System.Object UnableToConnectException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class UnableToConnectException : Exception Constructors | Improve this Doc View Source UnableToConnectException() Declaration public UnableToConnectException() | Improve this Doc View Source UnableToConnectException(String) Declaration public UnableToConnectException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source UnableToConnectException(String, Exception) Declaration public UnableToConnectException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.UnexpectedDataFormatException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.UnexpectedDataFormatException.html",
    "title": "Class UnexpectedDataFormatException | AeroSharp",
    "keywords": "Class UnexpectedDataFormatException Exception for when the data from Aerospike cannot be properly cast to a byte array. Inheritance System.Object UnexpectedDataFormatException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public class UnexpectedDataFormatException : Exception Constructors | Improve this Doc View Source UnexpectedDataFormatException() Declaration public UnexpectedDataFormatException() | Improve this Doc View Source UnexpectedDataFormatException(String) Declaration public UnexpectedDataFormatException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source UnexpectedDataFormatException(String, Exception) Declaration public UnexpectedDataFormatException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.Exceptions.UnsupportedKeyTypeException.html": {
    "href": "api/AeroSharp.DataAccess.Exceptions.UnsupportedKeyTypeException.html",
    "title": "Class UnsupportedKeyTypeException | AeroSharp",
    "keywords": "Class UnsupportedKeyTypeException Exception thrown when a map key is not of the correct type. Inheritance System.Object UnsupportedKeyTypeException Namespace : AeroSharp.DataAccess.Exceptions Assembly : AeroSharp.dll Syntax public sealed class UnsupportedKeyTypeException : Exception Constructors | Improve this Doc View Source UnsupportedKeyTypeException() Declaration public UnsupportedKeyTypeException() | Improve this Doc View Source UnsupportedKeyTypeException(String) Declaration public UnsupportedKeyTypeException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source UnsupportedKeyTypeException(String, Exception) Declaration public UnsupportedKeyTypeException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/AeroSharp.DataAccess.General.html": {
    "href": "api/AeroSharp.DataAccess.General.html",
    "title": "Namespace AeroSharp.DataAccess.General | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.General Classes KeyExistence ScanContext Represents the necessary context for a specific set scanner. SetScannerBuilder Provides an interface for building a set scanner. Interfaces IKeyOperator An interface for interacting with records by key. IKeyOperatorBuilder An interface for building a IKeyOperator . ISetScanner Provides an interface for scanning a set and doing something about scanned records for arbitrary types and bins. ISetScanner<T> Provides an interface for scanning a set comprising of a single type in the default bin. ISetScanner<T1, T2> Provides an interface for scanning a set comprising of two types in their corresponding default bins. ISetScanner<T1, T2, T3> Provides an interface for scanning a set comprising of three types in their corresponding default bins. ISetScannerBuilder Provides an interface for building a set scanner. ISetTruncator An interface for quickly truncating all records contained in a namespace/set. It gets the namespace and set from the DataContext passed into the SetTruncatorBuilder . This method is many orders of magnitude faster than deleting records one at a time. ISetTruncatorBuilder An interface for building a AeroSharp.DataAccess.General.SetTruncator ."
  },
  "api/AeroSharp.DataAccess.General.IKeyOperator.html": {
    "href": "api/AeroSharp.DataAccess.General.IKeyOperator.html",
    "title": "Interface IKeyOperator | AeroSharp",
    "keywords": "Interface IKeyOperator An interface for interacting with records by key. Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface IKeyOperator Methods | Improve this Doc View Source DeleteAsync(String, CancellationToken) Asynchronously delete record for specified key. Declaration Task DeleteAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the delete operation. | Improve this Doc View Source KeyExistsAsync(String, CancellationToken) Asynchronously determine if a record key exists. Declaration Task<KeyExistence> KeyExistsAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyExistence > An awaitable resulting in a KeyExistence , indicating if the record exists or not. | Improve this Doc View Source KeysExistAsync(IEnumerable<String>, CancellationToken) Asynchronously determine if the supplied record keys exist. Declaration Task<IEnumerable<KeyExistence>> KeysExistAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < KeyExistence >> An awaitable resulting in an of KeyExistence objects for each key, specifying if the records exist or not. | Improve this Doc View Source ResetExpirationAsync(String, CancellationToken) Asynchronously reset record's time to live to the set's default. Fail if the record does not exist. Declaration Task ResetExpirationAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source ResetExpirationAsync(String, TimeSpan, CancellationToken) Asynchronously reset record's time to live. Fail if the record does not exist. Declaration Task ResetExpirationAsync(string key, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation."
  },
  "api/AeroSharp.DataAccess.General.IKeyOperatorBuilder.html": {
    "href": "api/AeroSharp.DataAccess.General.IKeyOperatorBuilder.html",
    "title": "Interface IKeyOperatorBuilder | AeroSharp",
    "keywords": "Interface IKeyOperatorBuilder An interface for building a IKeyOperator . Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface IKeyOperatorBuilder Methods | Improve this Doc View Source Build() Creates a new IKeyOperator instance with the previously set properties. Declaration IKeyOperator Build() Returns Type Description IKeyOperator A IKeyOperator instance."
  },
  "api/AeroSharp.DataAccess.General.ISetScanner.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetScanner.html",
    "title": "Interface ISetScanner | AeroSharp",
    "keywords": "Interface ISetScanner Provides an interface for scanning a set and doing something about scanned records for arbitrary types and bins. Inherited Members IOverridable<ISetScanner, ScanConfiguration>.Override(Func<ScanConfiguration, ScanConfiguration>) Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetScanner : IOverridable<ISetScanner, ScanConfiguration> Methods | Improve this Doc View Source ScanSet(Action<String>) Synchronously scan a set and perform an operation on a found key. Declaration void ScanSet(Action<string> recordFoundOperation) Parameters Type Name Description Action < System.String > recordFoundOperation The operation to perform. | Improve this Doc View Source ScanSet<T1>(Action<KeyValuePair<String, T1>>, String) Synchronously scan a set and perform an operation on a found key-value pair. Declaration void ScanSet<T1>(Action<KeyValuePair<string, T1>> recordFoundOperation, string bin) Parameters Type Name Description Action < KeyValuePair < System.String , T1>> recordFoundOperation The operation to perform. System.String bin The bin to retrieve the value from. Type Parameters Name Description T1 The type of the value retrieved in the bin. | Improve this Doc View Source ScanSet<T1, T2>(Action<(String Key, T1 Value1, T2 Value2)>, String, String) Synchronously scan a set and perform an operation on a found key value-set. Declaration void ScanSet<T1, T2>(Action<(string Key, T1 Value1, T2 Value2)> recordFoundOperation, string bin1, string bin2) Parameters Type Name Description Action < System.ValueTuple < System.String , T1, T2>> recordFoundOperation The operation to perform. System.String bin1 The bin to retrieve the first typed value from. System.String bin2 The bin to retrieve the second typed value from. Type Parameters Name Description T1 The type of the value retrieved from bin1. T2 The type of the value retrieved from bin2. | Improve this Doc View Source ScanSet<T1, T2, T3>(Action<(String Key, T1 Value1, T2 Value2, T3 Value3)>, String, String, String) Synchronously scan a set and perform an operation on a found key value-set. Declaration void ScanSet<T1, T2, T3>(Action<(string Key, T1 Value1, T2 Value2, T3 Value3)> recordFoundOperation, string bin1, string bin2, string bin3) Parameters Type Name Description Action < System.ValueTuple < System.String , T1, T2, T3>> recordFoundOperation The operation to perform. System.String bin1 The bin to retrieve the first typed value from. System.String bin2 The bin to retrieve the second typed value from. System.String bin3 The bin to retrieve the third typed value from. Type Parameters Name Description T1 The type of the value retrieved from bin1. T2 The type of the value retrieved from bin2. T3 The type of the value retrieved from bin3."
  },
  "api/AeroSharp.DataAccess.General.ISetScanner-1.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetScanner-1.html",
    "title": "Interface ISetScanner<T> | AeroSharp",
    "keywords": "Interface ISetScanner<T> Provides an interface for scanning a set comprising of a single type in the default bin. Inherited Members IOverridable<ISetScanner<T>, ScanConfiguration>.Override(Func<ScanConfiguration, ScanConfiguration>) Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetScanner<T> : IOverridable<ISetScanner<T>, ScanConfiguration> Type Parameters Name Description T The type of the record in the set. Methods | Improve this Doc View Source ScanSet(Action<KeyValuePair<String, T>>) Synchronously scan a set and perform an operation on the the found key-value pair. Declaration void ScanSet(Action<KeyValuePair<string, T>> recordFoundOperation) Parameters Type Name Description Action < KeyValuePair < System.String , T>> recordFoundOperation The operation to perform."
  },
  "api/AeroSharp.DataAccess.General.ISetScanner-2.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetScanner-2.html",
    "title": "Interface ISetScanner<T1, T2> | AeroSharp",
    "keywords": "Interface ISetScanner<T1, T2> Provides an interface for scanning a set comprising of two types in their corresponding default bins. Inherited Members IOverridable<ISetScanner<T1, T2>, ScanConfiguration>.Override(Func<ScanConfiguration, ScanConfiguration>) Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetScanner<T1, T2> : IOverridable<ISetScanner<T1, T2>, ScanConfiguration> Type Parameters Name Description T1 The first type in the first default bin. T2 The second type in the second default bin. Methods | Improve this Doc View Source ScanSet(Action<(String Key, T1 Value1, T2 Value2)>) Synchronously scan a set and perform an operation on the found key value-set. Declaration void ScanSet(Action<(string Key, T1 Value1, T2 Value2)> recordFoundOperation) Parameters Type Name Description Action < System.ValueTuple < System.String , T1, T2>> recordFoundOperation The operation to perform."
  },
  "api/AeroSharp.DataAccess.General.ISetScanner-3.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetScanner-3.html",
    "title": "Interface ISetScanner<T1, T2, T3> | AeroSharp",
    "keywords": "Interface ISetScanner<T1, T2, T3> Provides an interface for scanning a set comprising of three types in their corresponding default bins. Inherited Members IOverridable<ISetScanner<T1, T2, T3>, ScanConfiguration>.Override(Func<ScanConfiguration, ScanConfiguration>) Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetScanner<T1, T2, T3> : IOverridable<ISetScanner<T1, T2, T3>, ScanConfiguration> Type Parameters Name Description T1 The first type in the first default bin. T2 The second type in the second default bin. T3 The third type in the third default bin. Methods | Improve this Doc View Source ScanSet(Action<(String Key, T1 Value1, T2 Value2, T3 Value3)>) Synchronously scan a set and perform an operation on the found key value-set. Declaration void ScanSet(Action<(string Key, T1 Value1, T2 Value2, T3 Value3)> recordFoundOperation) Parameters Type Name Description Action < System.ValueTuple < System.String , T1, T2, T3>> recordFoundOperation The operation to perform."
  },
  "api/AeroSharp.DataAccess.General.ISetScannerBuilder.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetScannerBuilder.html",
    "title": "Interface ISetScannerBuilder | AeroSharp",
    "keywords": "Interface ISetScannerBuilder Provides an interface for building a set scanner. Inherited Members ICompressorBuilder<ISetScannerBuilder>.UseLZ4() ICompressorBuilder<ISetScannerBuilder>.WithCompressor(ICompressor) Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetScannerBuilder : ICompressorBuilder<ISetScannerBuilder> Methods | Improve this Doc View Source Build() Builds a ISetScanner to scan any set reading from any or no bins. Declaration ISetScanner Build() Returns Type Description ISetScanner A freshly-built ISetScanner . | Improve this Doc View Source Build<T>() Builds a ISetScanner<T> to scan any set reading from the default first bin whose type is T . Declaration ISetScanner<T> Build<T>() Returns Type Description ISetScanner <T> A freshly-built ISetScanner<T> . Type Parameters Name Description T The type of the value inside the default bin. | Improve this Doc View Source Build<T>(String) Builds a ISetScanner<T> to scan any set reading from the specified bin whose type is T . Declaration ISetScanner<T> Build<T>(string bin) Parameters Type Name Description System.String bin The name of the bin to read from. Returns Type Description ISetScanner <T> A freshly-built ISetScanner<T> . Type Parameters Name Description T The type of the value inside the specified bin. | Improve this Doc View Source Build<T1, T2>() Builds a ISetScanner<T1, T2> to scan any set reading from the default first two bins whose types are T1 and T2 respectively. Declaration ISetScanner<T1, T2> Build<T1, T2>() Returns Type Description ISetScanner <T1, T2> A freshly-built ISetScanner<T1, T2> . Type Parameters Name Description T1 The type of the value in the first default bin. T2 The type of the value in the second default bin. | Improve this Doc View Source Build<T1, T2>(String, String) Builds a ISetScanner<T1, T2> to scan any set reading from the specified bins whose types are T1 and T2 respectively. Declaration ISetScanner<T1, T2> Build<T1, T2>(string bin1, string bin2) Parameters Type Name Description System.String bin1 The name of the first bin to read from. System.String bin2 The name of the second bin to read from. Returns Type Description ISetScanner <T1, T2> A freshly-built ISetScanner<T1, T2> . Type Parameters Name Description T1 The type of the value inside the first specified bin. T2 The type of the value inside the second specified bin. | Improve this Doc View Source Build<T1, T2, T3>() Builds a ISetScanner<T1, T2, T3> to scan any set reading from the default first three bins whose types are T1 , T2 , and T3 respectively. Declaration ISetScanner<T1, T2, T3> Build<T1, T2, T3>() Returns Type Description ISetScanner <T1, T2, T3> A freshly-built ISetScanner<T1, T2, T3> . Type Parameters Name Description T1 The type of the value in the first default bin. T2 The type of the value in the second default bin. T3 The type of the value in the third default bin. | Improve this Doc View Source Build<T1, T2, T3>(String, String, String) Builds a ISetScanner<T1, T2, T3> to scan any set reading from the specified bins whose types are T1 , T2 , and T3 respectively. Declaration ISetScanner<T1, T2, T3> Build<T1, T2, T3>(string bin1, string bin2, string bin3) Parameters Type Name Description System.String bin1 The name of the first bin to read from. System.String bin2 The name of the second bin to read from. System.String bin3 The name of the third bin to read from. Returns Type Description ISetScanner <T1, T2, T3> A freshly-built ISetScanner<T1, T2, T3> . Type Parameters Name Description T1 The type of the value in the first specified bin. T2 The type of the value in the second specified bin. T3 The type of the value in the third specified bin. | Improve this Doc View Source WithScanConfiguration(ScanConfiguration) Optional: Provide a ScanConfiguration with different settings than the default. Declaration ISetScannerBuilder WithScanConfiguration(ScanConfiguration scanConfiguration) Parameters Type Name Description ScanConfiguration scanConfiguration The new settings. Returns Type Description ISetScannerBuilder The instance of this builder, with the new configuration loaded."
  },
  "api/AeroSharp.DataAccess.General.ISetTruncator.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetTruncator.html",
    "title": "Interface ISetTruncator | AeroSharp",
    "keywords": "Interface ISetTruncator An interface for quickly truncating all records contained in a namespace/set. It gets the namespace and set from the DataContext passed into the SetTruncatorBuilder . This method is many orders of magnitude faster than deleting records one at a time. Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetTruncator Methods | Improve this Doc View Source TruncateSet() Remove records in a set. Declaration void TruncateSet() | Improve this Doc View Source TruncateSet(DateTime) Remove records in a set. before record last update time. The value must be before the current time. Declaration void TruncateSet(DateTime truncateBefore) Parameters Type Name Description DateTime truncateBefore Truncate records before last update time. | Improve this Doc View Source TruncateSetAsync(CancellationToken) Remove records in a set asynchronously. Declaration Task TruncateSetAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task | Improve this Doc View Source TruncateSetAsync(DateTime, CancellationToken) Remove records in a set asynchronously before record last update time. The value must be before the current time. Declaration Task TruncateSetAsync(DateTime truncateBefore, CancellationToken cancellationToken) Parameters Type Name Description DateTime truncateBefore Truncate records before last update time. CancellationToken cancellationToken The cancellation token. Returns Type Description Task"
  },
  "api/AeroSharp.DataAccess.General.ISetTruncatorBuilder.html": {
    "href": "api/AeroSharp.DataAccess.General.ISetTruncatorBuilder.html",
    "title": "Interface ISetTruncatorBuilder | AeroSharp",
    "keywords": "Interface ISetTruncatorBuilder An interface for building a AeroSharp.DataAccess.General.SetTruncator . Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public interface ISetTruncatorBuilder Methods | Improve this Doc View Source Build() Creates a new ISetTruncator instance with the previously set properties. Declaration ISetTruncator Build() Returns Type Description ISetTruncator A ISetTruncator instance. | Improve this Doc View Source WithInfoConfiguration(InfoConfiguration) Sets the optional InfoConfiguration if it needs values different from the default. Declaration ISetTruncatorBuilder WithInfoConfiguration(InfoConfiguration infoConfiguration) Parameters Type Name Description InfoConfiguration infoConfiguration An InfoConfiguration . Returns Type Description ISetTruncatorBuilder A ISetTruncatorBuilder ."
  },
  "api/AeroSharp.DataAccess.General.KeyExistence.html": {
    "href": "api/AeroSharp.DataAccess.General.KeyExistence.html",
    "title": "Class KeyExistence | AeroSharp",
    "keywords": "Class KeyExistence Inheritance System.Object KeyExistence Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public class KeyExistence : object Constructors | Improve this Doc View Source KeyExistence(String, Boolean) Declaration public KeyExistence(string key, bool exists) Parameters Type Name Description System.String key System.Boolean exists Properties | Improve this Doc View Source Exists Declaration public bool Exists { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Declaration public string Key { get; } Property Value Type Description System.String"
  },
  "api/AeroSharp.DataAccess.General.ScanContext.html": {
    "href": "api/AeroSharp.DataAccess.General.ScanContext.html",
    "title": "Class ScanContext | AeroSharp",
    "keywords": "Class ScanContext Represents the necessary context for a specific set scanner. Inheritance System.Object ScanContext Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public class ScanContext : object Constructors | Improve this Doc View Source ScanContext(String[]) Instantiates a new ScanContext instance. Declaration public ScanContext(string[] bins) Parameters Type Name Description System.String [] bins The bin names to retrieve. Properties | Improve this Doc View Source Bins A list of bin names to retrieve. Declaration public string[] Bins { get; } Property Value Type Description System.String []"
  },
  "api/AeroSharp.DataAccess.General.SetScannerBuilder.html": {
    "href": "api/AeroSharp.DataAccess.General.SetScannerBuilder.html",
    "title": "Class SetScannerBuilder | AeroSharp",
    "keywords": "Class SetScannerBuilder Provides an interface for building a set scanner. Inheritance System.Object SetScannerBuilder Implements ISetScannerBuilder ICompressorBuilder < ISetScannerBuilder > IDataContextBuilder < ISerializerBuilder < ISetScannerBuilder >> ISerializerBuilder < ISetScannerBuilder > Namespace : AeroSharp.DataAccess.General Assembly : AeroSharp.dll Syntax public class SetScannerBuilder : object, ISetScannerBuilder, ICompressorBuilder<ISetScannerBuilder>, IDataContextBuilder<ISerializerBuilder<ISetScannerBuilder>>, ISerializerBuilder<ISetScannerBuilder> Methods | Improve this Doc View Source Build() Builds a ISetScanner to scan any set reading from any or no bins. Declaration public ISetScanner Build() Returns Type Description ISetScanner A freshly-built ISetScanner . | Improve this Doc View Source Build<T>() Builds a ISetScanner<T> to scan any set reading from the default first bin whose type is T . Declaration public ISetScanner<T> Build<T>() Returns Type Description ISetScanner <T> A freshly-built ISetScanner<T> . Type Parameters Name Description T The type of the value inside the default bin. | Improve this Doc View Source Build<T>(String) Builds a ISetScanner<T> to scan any set reading from the specified bin whose type is T . Declaration public ISetScanner<T> Build<T>(string bin) Parameters Type Name Description System.String bin The name of the bin to read from. Returns Type Description ISetScanner <T> A freshly-built ISetScanner<T> . Type Parameters Name Description T The type of the value inside the specified bin. | Improve this Doc View Source Build<T1, T2>() Builds a ISetScanner<T1, T2> to scan any set reading from the default first two bins whose types are T1 and T2 respectively. Declaration public ISetScanner<T1, T2> Build<T1, T2>() Returns Type Description ISetScanner <T1, T2> A freshly-built ISetScanner<T1, T2> . Type Parameters Name Description T1 The type of the value in the first default bin. T2 The type of the value in the second default bin. | Improve this Doc View Source Build<T1, T2>(String, String) Builds a ISetScanner<T1, T2> to scan any set reading from the specified bins whose types are T1 and T2 respectively. Declaration public ISetScanner<T1, T2> Build<T1, T2>(string bin1, string bin2) Parameters Type Name Description System.String bin1 The name of the first bin to read from. System.String bin2 The name of the second bin to read from. Returns Type Description ISetScanner <T1, T2> A freshly-built ISetScanner<T1, T2> . Type Parameters Name Description T1 The type of the value inside the first specified bin. T2 The type of the value inside the second specified bin. | Improve this Doc View Source Build<T1, T2, T3>() Builds a ISetScanner<T1, T2, T3> to scan any set reading from the default first three bins whose types are T1 , T2 , and T3 respectively. Declaration public ISetScanner<T1, T2, T3> Build<T1, T2, T3>() Returns Type Description ISetScanner <T1, T2, T3> A freshly-built ISetScanner<T1, T2, T3> . Type Parameters Name Description T1 The type of the value in the first default bin. T2 The type of the value in the second default bin. T3 The type of the value in the third default bin. | Improve this Doc View Source Build<T1, T2, T3>(String, String, String) Builds a ISetScanner<T1, T2, T3> to scan any set reading from the specified bins whose types are T1 , T2 , and T3 respectively. Declaration public ISetScanner<T1, T2, T3> Build<T1, T2, T3>(string bin1, string bin2, string bin3) Parameters Type Name Description System.String bin1 The name of the first bin to read from. System.String bin2 The name of the second bin to read from. System.String bin3 The name of the third bin to read from. Returns Type Description ISetScanner <T1, T2, T3> A freshly-built ISetScanner<T1, T2, T3> . Type Parameters Name Description T1 The type of the value in the first specified bin. T2 The type of the value in the second specified bin. T3 The type of the value in the third specified bin. | Improve this Doc View Source Configure(IClientProvider) Configures a new AeroSharp.DataAccess.General.SetScanner . Declaration public static IDataContextBuilder<ISerializerBuilder<ISetScannerBuilder>> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A client provider. Returns Type Description IDataContextBuilder < ISerializerBuilder < ISetScannerBuilder >> A set scanner builder instance. | Improve this Doc View Source UseLZ4() Uses the default AeroSharp.Compression.LZ4Compressor . Declaration public ISetScannerBuilder UseLZ4() Returns Type Description ISetScannerBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializer() Use the built-in AeroSharp.Serialization.MessagePackSerializer . Declaration public ISetScannerBuilder UseMessagePackSerializer() Returns Type Description ISetScannerBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializerWithLz4Compression() Use the built-in AeroSharp.Serialization.MessagePackSerializerWithCompression . Declaration public ISetScannerBuilder UseMessagePackSerializerWithLz4Compression() Returns Type Description ISetScannerBuilder An instance of the next builder. | Improve this Doc View Source UseProtobufSerializer() Use the default AeroSharp.Serialization.ProtobufSerializer . Declaration public ISetScannerBuilder UseProtobufSerializer() Returns Type Description ISetScannerBuilder An instance of the next builder. | Improve this Doc View Source WithCompressor(ICompressor) Use a provided instance of an ICompressor . Declaration public ISetScannerBuilder WithCompressor(ICompressor compressor) Parameters Type Name Description ICompressor compressor The ICompressor instance. Returns Type Description ISetScannerBuilder An instance of the next builder. | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration public ISerializerBuilder<ISetScannerBuilder> WithDataContext(DataContext dataContext) Parameters Type Name Description DataContext dataContext The DataContext to use. Returns Type Description ISerializerBuilder < ISetScannerBuilder > An instance of the next builder. | Improve this Doc View Source WithScanConfiguration(ScanConfiguration) Optional: Provide a ScanConfiguration with different settings than the default. Declaration public ISetScannerBuilder WithScanConfiguration(ScanConfiguration scanConfiguration) Parameters Type Name Description ScanConfiguration scanConfiguration The new settings. Returns Type Description ISetScannerBuilder The instance of this builder, with the new configuration loaded. | Improve this Doc View Source WithSerializer(ISerializer) Use a provided instance of an ISerializer . Declaration public ISetScannerBuilder WithSerializer(ISerializer serializer) Parameters Type Name Description ISerializer serializer The ISerializer instance. Returns Type Description ISetScannerBuilder An instance of the next builder. Implements ISetScannerBuilder ICompressorBuilder<TNextBuilder> IDataContextBuilder<TNextBuilder> ISerializerBuilder<TNextBuilder>"
  },
  "api/AeroSharp.DataAccess.html": {
    "href": "api/AeroSharp.DataAccess.html",
    "title": "Namespace AeroSharp.DataAccess | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess Classes DataContext InfoConfiguration A configuration for setting timeouts. Default is a one second timeout. ListConfiguration MapConfiguration Configuration that will help build a MapPolicy for Aerospike Map operations. ReadConfiguration A class for storing and passing the configurable settings for reads. ScanConfiguration A class for storing and passing the configurable settings for scans. WriteConfiguration A class for storing and passing the configurable settings for writes. Enums TimeToLiveBehavior Defines behavior of time-to-live configuration parameter."
  },
  "api/AeroSharp.DataAccess.InfoConfiguration.html": {
    "href": "api/AeroSharp.DataAccess.InfoConfiguration.html",
    "title": "Class InfoConfiguration | AeroSharp",
    "keywords": "Class InfoConfiguration A configuration for setting timeouts. Default is a one second timeout. Inheritance System.Object InfoConfiguration Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public class InfoConfiguration : object Constructors | Improve this Doc View Source InfoConfiguration() /// Initializes a new instance of the InfoConfiguration class. Declaration public InfoConfiguration() Properties | Improve this Doc View Source RequestTimeout Info command socket timeout. Default is 1 second. Declaration public TimeSpan RequestTimeout { get; set; } Property Value Type Description TimeSpan"
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.html",
    "title": "Namespace AeroSharp.DataAccess.KeyValueAccess | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.KeyValueAccess Classes KeyValueStore<T> An interface for reading and writing values by key to a configured bin. KeyValueStore<T1, T2> An interface for reading and writing values by key to two bins. KeyValueStore<T1, T2, T3> An interface for reading and writing values by key to configured bins. KeyValueStoreContext Interfaces IKeyValueStore An interface for reading and writing values by key. IKeyValueStore<T> An interface for reading and writing values by key to a configured bin. IKeyValueStore<T1, T2> An interface for reading and writing values by key to two bins. IKeyValueStore<T1, T2, T3> An interface for reading and writing values by key to configured bins. IKeyValueStoreBuilder An interface for building a IKeyValueStore ."
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore.html",
    "title": "Interface IKeyValueStore | AeroSharp",
    "keywords": "Interface IKeyValueStore An interface for reading and writing values by key. Inherited Members IOverridable<IKeyValueStore, ReadConfiguration>.Override(Func<ReadConfiguration, ReadConfiguration>) IOverridable<IKeyValueStore, WriteConfiguration>.Override(Func<WriteConfiguration, WriteConfiguration>) Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public interface IKeyValueStore : IOverridable<IKeyValueStore, ReadConfiguration>, IOverridable<IKeyValueStore, WriteConfiguration> Methods | Improve this Doc View Source ReadAsync<T>(IEnumerable<String>, String, CancellationToken) Read the values for multiple keys in a specified bin. Declaration Task<IEnumerable<KeyValuePair<string, T>>> ReadAsync<T>(IEnumerable<string> keys, string bin, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. System.String bin The name of the bin to access. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < KeyValuePair < System.String , T>>> A collection of KeyValuePairs representing the records. Type Parameters Name Description T Type stored in the bin. | Improve this Doc View Source ReadAsync<T>(String, String, CancellationToken) Read the value for a single key in a specified bin. Declaration Task<KeyValuePair<string, T>> ReadAsync<T>(string key, string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin The name of the bin to access. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair < System.String , T>> A KeyValuePair representing the record. Type Parameters Name Description T Type stored in the bin. | Improve this Doc View Source ReadAsync<T1, T2>(IEnumerable<String>, String, String, CancellationToken) Read the values for multiple keys across two bins. Declaration Task<IEnumerable<(string Key, T1 Value1, T2 Value2)>> ReadAsync<T1, T2>(IEnumerable<string> keys, string bin1, string bin2, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. System.String bin1 The name of the first bin to access. System.String bin2 The name of the second bin to access. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < System.ValueTuple < System.String , T1, T2>>> The keys and associated values. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. | Improve this Doc View Source ReadAsync<T1, T2>(String, String, String, CancellationToken) Read the values for a single key in specified bins. Declaration Task<(string Key, T1 Value1, T2 Value2)> ReadAsync<T1, T2>(string key, string bin1, string bin2, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin1 The name of the first bin to access. System.String bin2 The name of the second bin to access. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.ValueTuple < System.String , T1, T2>> The key and associated values. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. | Improve this Doc View Source ReadAsync<T1, T2, T3>(IEnumerable<String>, String, String, String, CancellationToken) Read the values for multiple keys across three bins. Declaration Task<IEnumerable<(string Key, T1 Value1, T2 Value2, T3 Value3)>> ReadAsync<T1, T2, T3>(IEnumerable<string> keys, string bin1, string bin2, string bin3, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. System.String bin1 The name of the first bin to access. System.String bin2 The name of the second bin to access. System.String bin3 The name of the second bin to access. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < System.ValueTuple < System.String , T1, T2, T3>>> The keys and associated values. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. T3 Type stored in the third bin. | Improve this Doc View Source ReadAsync<T1, T2, T3>(String, String, String, String, CancellationToken) Read the values for a single key in specified bins. Declaration Task<(string Key, T1 Value1, T2 Value2, T3 Value3)> ReadAsync<T1, T2, T3>(string key, string bin1, string bin2, string bin3, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin1 The name of the first bin to access. System.String bin2 The name of the second bin to access. System.String bin3 The name of the third bin to access. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.ValueTuple < System.String , T1, T2, T3>> The key and associated values. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. T3 Type stored in the third bin. | Improve this Doc View Source ReadModifyWriteAsync<T>(String, String, Func<T>, Func<T, T>, TimeSpan, CancellationToken) Read a record, modify, and write it in a thread-safe manner, with a specified time to live. Declaration Task ReadModifyWriteAsync<T>(string key, string bin, Func<T> addValueFunc, Func<T, T> updateValueFunc, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin The name of the bin to access. Func <T> addValueFunc Function to initialize the value if it did not previously exist. Func <T, T> updateValueFunc Function to update a previously-existing value. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T Type stored in the bin. | Improve this Doc View Source WriteAsync<T>(String, String, T, CancellationToken) Write a value to a record in a specified bin. Declaration Task WriteAsync<T>(string key, string bin, T value, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin The name of the bin to access. T value The value to write. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T Type stored in the bin. | Improve this Doc View Source WriteAsync<T>(String, String, T, TimeSpan, CancellationToken) Write a value to a record in a specified bin, with a specified time to live. Declaration Task WriteAsync<T>(string key, string bin, T value, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin The name of the bin to access. T value The value to write. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T Type stored in the bin. | Improve this Doc View Source WriteAsync<T1, T2>(String, String, T1, String, T2, CancellationToken) Write to records in two specified bins. Declaration Task WriteAsync<T1, T2>(string key, string bin1, T1 value1, string bin2, T2 value2, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin1 The name of the first bin to access. T1 value1 The value to write to the first bin. System.String bin2 The name of the second bin to access. T2 value2 The value to write to the second bin. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. | Improve this Doc View Source WriteAsync<T1, T2>(String, String, T1, String, T2, TimeSpan, CancellationToken) Write to records in two specified bins, with a specified time to live. Declaration Task WriteAsync<T1, T2>(string key, string bin1, T1 value1, string bin2, T2 value2, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin1 The name of the first bin to access. T1 value1 The value to write to the first bin. System.String bin2 The name of the second bin to access. T2 value2 The value to write to the second bin. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. | Improve this Doc View Source WriteAsync<T1, T2, T3>(String, String, T1, String, T2, String, T3, CancellationToken) Write to records in three specified bins. Declaration Task WriteAsync<T1, T2, T3>(string key, string bin1, T1 value1, string bin2, T2 value2, string bin3, T3 value3, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin1 The name of the first bin to access. T1 value1 The value to write to the first bin. System.String bin2 The name of the second bin to access. T2 value2 The value to write to the second bin. System.String bin3 The name of the third bin to access. T3 value3 The value to write to the third bin. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. T3 Type stored in the third bin. | Improve this Doc View Source WriteAsync<T1, T2, T3>(String, String, T1, String, T2, String, T3, TimeSpan, CancellationToken) Write to records in three specified bins, with a specified time to live. Declaration Task WriteAsync<T1, T2, T3>(string key, string bin1, T1 value1, string bin2, T2 value2, string bin3, T3 value3, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. System.String bin1 The name of the first bin to access. T1 value1 The value to write to the first bin. System.String bin2 The name of the second bin to access. T2 value2 The value to write to the second bin. System.String bin3 The name of the third bin to access. T3 value3 The value to write to the third bin. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. T3 Type stored in the third bin."
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore-1.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore-1.html",
    "title": "Interface IKeyValueStore<T> | AeroSharp",
    "keywords": "Interface IKeyValueStore<T> An interface for reading and writing values by key to a configured bin. Inherited Members IOverridable<IKeyValueStore<T>, ReadConfiguration>.Override(Func<ReadConfiguration, ReadConfiguration>) IOverridable<IKeyValueStore<T>, WriteConfiguration>.Override(Func<WriteConfiguration, WriteConfiguration>) Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public interface IKeyValueStore<T> : IOverridable<IKeyValueStore<T>, ReadConfiguration>, IOverridable<IKeyValueStore<T>, WriteConfiguration> Type Parameters Name Description T Type stored in the bin. Methods | Improve this Doc View Source ReadAsync(IEnumerable<String>, CancellationToken) Read values for multiple keys. Declaration Task<IEnumerable<KeyValuePair<string, T>>> ReadAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < KeyValuePair < System.String , T>>> KeyValuePairs representing the records. | Improve this Doc View Source ReadAsync(String, CancellationToken) Read the value of a single key. Declaration Task<KeyValuePair<string, T>> ReadAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair < System.String , T>> A KeyValuePair representing the record. | Improve this Doc View Source ReadModifyWriteAsync(String, Func<T>, Func<T, T>, TimeSpan, CancellationToken) Read a record, modify, and write it in a thread-safe manner, with a specified time to live. Declaration Task ReadModifyWriteAsync(string key, Func<T> addValueFunc, Func<T, T> updateValueFunc, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. Func <T> addValueFunc Function to initialize the value if it did not previously exist. Func <T, T> updateValueFunc Function to update a previously-existing value. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T, CancellationToken) Write a value to a record. Declaration Task WriteAsync(string key, T value, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T value The value to write. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T, TimeSpan, CancellationToken) Write a value to a record, with a specified time to live. Declaration Task WriteAsync(string key, T value, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T value The value to write. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation."
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore-2.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore-2.html",
    "title": "Interface IKeyValueStore<T1, T2> | AeroSharp",
    "keywords": "Interface IKeyValueStore<T1, T2> An interface for reading and writing values by key to two bins. Inherited Members IOverridable<IKeyValueStore<T1, T2>, ReadConfiguration>.Override(Func<ReadConfiguration, ReadConfiguration>) IOverridable<IKeyValueStore<T1, T2>, WriteConfiguration>.Override(Func<WriteConfiguration, WriteConfiguration>) Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public interface IKeyValueStore<T1, T2> : IOverridable<IKeyValueStore<T1, T2>, ReadConfiguration>, IOverridable<IKeyValueStore<T1, T2>, WriteConfiguration> Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. Methods | Improve this Doc View Source ReadAsync(IEnumerable<String>, CancellationToken) Read values from two bins. Declaration Task<IEnumerable<(string Key, T1 Value1, T2 Value2)>> ReadAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < System.ValueTuple < System.String , T1, T2>>> KeyValuePairs representing the records. | Improve this Doc View Source ReadAsync(String, CancellationToken) Read values with a given key from two bins. Declaration Task<(string Key, T1 Value1, T2 Value2)> ReadAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.ValueTuple < System.String , T1, T2>> The key and associated values. | Improve this Doc View Source WriteAsync(String, T1, T2, CancellationToken) Write values to two bins. Declaration Task WriteAsync(string key, T1 value1, T2 value2, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T1, T2, TimeSpan, CancellationToken) Write values to two bins, with a specified time to live. Declaration Task WriteAsync(string key, T1 value1, T2 value2, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation."
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore-3.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStore-3.html",
    "title": "Interface IKeyValueStore<T1, T2, T3> | AeroSharp",
    "keywords": "Interface IKeyValueStore<T1, T2, T3> An interface for reading and writing values by key to configured bins. Inherited Members IOverridable<IKeyValueStore<T1, T2, T3>, ReadConfiguration>.Override(Func<ReadConfiguration, ReadConfiguration>) IOverridable<IKeyValueStore<T1, T2, T3>, WriteConfiguration>.Override(Func<WriteConfiguration, WriteConfiguration>) Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public interface IKeyValueStore<T1, T2, T3> : IOverridable<IKeyValueStore<T1, T2, T3>, ReadConfiguration>, IOverridable<IKeyValueStore<T1, T2, T3>, WriteConfiguration> Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. T3 Type stored in the third bin. Methods | Improve this Doc View Source ReadAsync(IEnumerable<String>, CancellationToken) Read values from three bins. Declaration Task<IEnumerable<(string Key, T1 Value1, T2 Value2, T3 Value3)>> ReadAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < System.ValueTuple < System.String , T1, T2, T3>>> KeyValuePairs representing the records. | Improve this Doc View Source ReadAsync(String, CancellationToken) Read values with a given key from three bins. Declaration Task<(string Key, T1 Value1, T2 Value2, T3 Value3)> ReadAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.ValueTuple < System.String , T1, T2, T3>> The key and associated values. | Improve this Doc View Source WriteAsync(String, T1, T2, T3, CancellationToken) Write values to three bins. Declaration Task WriteAsync(string key, T1 value1, T2 value2, T3 value3, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. T3 value3 The value to write to the third bin. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T1, T2, T3, TimeSpan, CancellationToken) Write values to three bins, with a specified time to live. Declaration Task WriteAsync(string key, T1 value1, T2 value2, T3 value3, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. T3 value3 The value to write to the third bin. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation."
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStoreBuilder.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.IKeyValueStoreBuilder.html",
    "title": "Interface IKeyValueStoreBuilder | AeroSharp",
    "keywords": "Interface IKeyValueStoreBuilder An interface for building a IKeyValueStore . Inherited Members ICompressorBuilder<IKeyValueStoreBuilder>.UseLZ4() ICompressorBuilder<IKeyValueStoreBuilder>.WithCompressor(ICompressor) Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public interface IKeyValueStoreBuilder : ICompressorBuilder<IKeyValueStoreBuilder> Methods | Improve this Doc View Source Build() Builds a IKeyValueStore to read or write any serializable data type in any bin. Declaration IKeyValueStore Build() Returns Type Description IKeyValueStore A IKeyValueStore . | Improve this Doc View Source Build<T>() Builds a IKeyValueStore<T> to read or write one data type in a single bin. Declaration IKeyValueStore<T> Build<T>() Returns Type Description IKeyValueStore <T> A IKeyValueStore<T> IKeyValueStore<T> . Type Parameters Name Description T The data type stored in the bin. | Improve this Doc View Source Build<T>(String) Builds a IKeyValueStore<T> to read or write one data type in a single bin. Declaration IKeyValueStore<T> Build<T>(string bin) Parameters Type Name Description System.String bin The name of the bin to operate on. Returns Type Description IKeyValueStore <T> A IKeyValueStore<T> IKeyValueStore<T> . Type Parameters Name Description T The data type stored in the bin. | Improve this Doc View Source Build<T1, T2>() Builds a IKeyValueStore<T1, T2> to read or write two types in two bins. Declaration IKeyValueStore<T1, T2> Build<T1, T2>() Returns Type Description IKeyValueStore <T1, T2> A IKeyValueStore<T1, T2> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. | Improve this Doc View Source Build<T1, T2>(String, String) Builds a IKeyValueStore<T1, T2> to read or write two types in two bins. Declaration IKeyValueStore<T1, T2> Build<T1, T2>(string bin1, string bin2) Parameters Type Name Description System.String bin1 The name of the first bin to operate on. System.String bin2 The name of the second bin to operate on. Returns Type Description IKeyValueStore <T1, T2> A IKeyValueStore<T1, T2> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. | Improve this Doc View Source Build<T1, T2, T3>() Builds a IKeyValueStore<T1, T2, T3> to read or write three types in three bins. Declaration IKeyValueStore<T1, T2, T3> Build<T1, T2, T3>() Returns Type Description IKeyValueStore <T1, T2, T3> A IKeyValueStore<T1, T2, T3> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. T3 The data type stored in the third bin. | Improve this Doc View Source Build<T1, T2, T3>(String, String, String) Builds a IKeyValueStore<T1, T2, T3> to read or write three types in three bins. Declaration IKeyValueStore<T1, T2, T3> Build<T1, T2, T3>(string bin1, string bin2, string bin3) Parameters Type Name Description System.String bin1 The name of the first bin to operate on. System.String bin2 The name of the second bin to operate on. System.String bin3 The name of the third bin to operate on. Returns Type Description IKeyValueStore <T1, T2, T3> A IKeyValueStore<T1, T2, T3> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. T3 The data type stored in the third bin. | Improve this Doc View Source WithPlugin(IKeyValueStorePlugin) Optional: Provide IKeyValueStorePlugin for event callbacks on reads and writes. Declaration IKeyValueStoreBuilder WithPlugin(IKeyValueStorePlugin keyValueStorePlugin) Parameters Type Name Description IKeyValueStorePlugin keyValueStorePlugin An implementation of IKeyValueStorePlugin . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . | Improve this Doc View Source WithReadConfiguration(ReadConfiguration) Optional: Provide a ReadConfiguration with different settings than the default. Declaration IKeyValueStoreBuilder WithReadConfiguration(ReadConfiguration readConfiguration) Parameters Type Name Description ReadConfiguration readConfiguration A ReadConfiguration . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . | Improve this Doc View Source WithReadModifyWriteConfiguration(ReadModifyWritePolicy) Optional: Provide ReadModifyWritePolicy for read modify write pattern implementation on writes. Declaration IKeyValueStoreBuilder WithReadModifyWriteConfiguration(ReadModifyWritePolicy policy) Parameters Type Name Description ReadModifyWritePolicy policy An implementation of ReadModifyWritePolicy . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration IKeyValueStoreBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration A WriteConfiguration . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder ."
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStore-1.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStore-1.html",
    "title": "Class KeyValueStore<T> | AeroSharp",
    "keywords": "Class KeyValueStore<T> An interface for reading and writing values by key to a configured bin. Inheritance System.Object KeyValueStore<T> Implements IKeyValueStore <T> IOverridable < IKeyValueStore <T>, ReadConfiguration > IOverridable < IKeyValueStore <T>, WriteConfiguration > Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public class KeyValueStore<T> : object, IKeyValueStore<T>, IOverridable<IKeyValueStore<T>, ReadConfiguration>, IOverridable<IKeyValueStore<T>, WriteConfiguration> Type Parameters Name Description T Type stored in the bin. Methods | Improve this Doc View Source Override(Func<ReadConfiguration, ReadConfiguration>) Declaration public IKeyValueStore<T> Override(Func<ReadConfiguration, ReadConfiguration> configOverride) Parameters Type Name Description Func < ReadConfiguration , ReadConfiguration > configOverride Returns Type Description IKeyValueStore <T> | Improve this Doc View Source Override(Func<WriteConfiguration, WriteConfiguration>) Declaration public IKeyValueStore<T> Override(Func<WriteConfiguration, WriteConfiguration> configOverride) Parameters Type Name Description Func < WriteConfiguration , WriteConfiguration > configOverride Returns Type Description IKeyValueStore <T> | Improve this Doc View Source ReadAsync(IEnumerable<String>, CancellationToken) Read values for multiple keys. Declaration public Task<IEnumerable<KeyValuePair<string, T>>> ReadAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < KeyValuePair < System.String , T>>> KeyValuePairs representing the records. | Improve this Doc View Source ReadAsync(String, CancellationToken) Read the value of a single key. Declaration public Task<KeyValuePair<string, T>> ReadAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair < System.String , T>> A KeyValuePair representing the record. | Improve this Doc View Source ReadModifyWriteAsync(String, Func<T>, Func<T, T>, TimeSpan, CancellationToken) Read a record, modify, and write it in a thread-safe manner, with a specified time to live. Declaration public Task ReadModifyWriteAsync(string key, Func<T> addValueFunc, Func<T, T> updateValueFunc, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. Func <T> addValueFunc Function to initialize the value if it did not previously exist. Func <T, T> updateValueFunc Function to update a previously-existing value. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T, CancellationToken) Write a value to a record. Declaration public Task WriteAsync(string key, T value, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T value The value to write. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T, TimeSpan, CancellationToken) Write a value to a record, with a specified time to live. Declaration public Task WriteAsync(string key, T value, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T value The value to write. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Implements IKeyValueStore<T> IOverridable<TDataAccessObject, TConfiguration> IOverridable<TDataAccessObject, TConfiguration>"
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStore-2.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStore-2.html",
    "title": "Class KeyValueStore<T1, T2> | AeroSharp",
    "keywords": "Class KeyValueStore<T1, T2> An interface for reading and writing values by key to two bins. Inheritance System.Object KeyValueStore<T1, T2> Implements IKeyValueStore <T1, T2> IOverridable < IKeyValueStore <T1, T2>, ReadConfiguration > IOverridable < IKeyValueStore <T1, T2>, WriteConfiguration > Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public class KeyValueStore<T1, T2> : object, IKeyValueStore<T1, T2>, IOverridable<IKeyValueStore<T1, T2>, ReadConfiguration>, IOverridable<IKeyValueStore<T1, T2>, WriteConfiguration> Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. Methods | Improve this Doc View Source Override(Func<ReadConfiguration, ReadConfiguration>) Declaration public IKeyValueStore<T1, T2> Override(Func<ReadConfiguration, ReadConfiguration> configOverride) Parameters Type Name Description Func < ReadConfiguration , ReadConfiguration > configOverride Returns Type Description IKeyValueStore <T1, T2> | Improve this Doc View Source Override(Func<WriteConfiguration, WriteConfiguration>) Declaration public IKeyValueStore<T1, T2> Override(Func<WriteConfiguration, WriteConfiguration> configOverride) Parameters Type Name Description Func < WriteConfiguration , WriteConfiguration > configOverride Returns Type Description IKeyValueStore <T1, T2> | Improve this Doc View Source ReadAsync(IEnumerable<String>, CancellationToken) Read values from two bins. Declaration public Task<IEnumerable<(string Key, T1 Value1, T2 Value2)>> ReadAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < System.ValueTuple < System.String , T1, T2>>> KeyValuePairs representing the records. | Improve this Doc View Source ReadAsync(String, CancellationToken) Read values with a given key from two bins. Declaration public Task<(string Key, T1 Value1, T2 Value2)> ReadAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.ValueTuple < System.String , T1, T2>> The key and associated values. | Improve this Doc View Source WriteAsync(String, T1, T2, CancellationToken) Write values to two bins. Declaration public Task WriteAsync(string key, T1 value1, T2 value2, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T1, T2, TimeSpan, CancellationToken) Write values to two bins, with a specified time to live. Declaration public Task WriteAsync(string key, T1 value1, T2 value2, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Implements IKeyValueStore<T1, T2> IOverridable<TDataAccessObject, TConfiguration> IOverridable<TDataAccessObject, TConfiguration>"
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStore-3.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStore-3.html",
    "title": "Class KeyValueStore<T1, T2, T3> | AeroSharp",
    "keywords": "Class KeyValueStore<T1, T2, T3> An interface for reading and writing values by key to configured bins. Inheritance System.Object KeyValueStore<T1, T2, T3> Implements IKeyValueStore <T1, T2, T3> IOverridable < IKeyValueStore <T1, T2, T3>, ReadConfiguration > IOverridable < IKeyValueStore <T1, T2, T3>, WriteConfiguration > Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public class KeyValueStore<T1, T2, T3> : object, IKeyValueStore<T1, T2, T3>, IOverridable<IKeyValueStore<T1, T2, T3>, ReadConfiguration>, IOverridable<IKeyValueStore<T1, T2, T3>, WriteConfiguration> Type Parameters Name Description T1 Type stored in the first bin. T2 Type stored in the second bin. T3 Type stored in the third bin. Methods | Improve this Doc View Source Override(Func<ReadConfiguration, ReadConfiguration>) Declaration public IKeyValueStore<T1, T2, T3> Override(Func<ReadConfiguration, ReadConfiguration> configOverride) Parameters Type Name Description Func < ReadConfiguration , ReadConfiguration > configOverride Returns Type Description IKeyValueStore <T1, T2, T3> | Improve this Doc View Source Override(Func<WriteConfiguration, WriteConfiguration>) Declaration public IKeyValueStore<T1, T2, T3> Override(Func<WriteConfiguration, WriteConfiguration> configOverride) Parameters Type Name Description Func < WriteConfiguration , WriteConfiguration > configOverride Returns Type Description IKeyValueStore <T1, T2, T3> | Improve this Doc View Source ReadAsync(IEnumerable<String>, CancellationToken) Read values from three bins. Declaration public Task<IEnumerable<(string Key, T1 Value1, T2 Value2, T3 Value3)>> ReadAsync(IEnumerable<string> keys, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < System.String > keys The record keys. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable < System.ValueTuple < System.String , T1, T2, T3>>> KeyValuePairs representing the records. | Improve this Doc View Source ReadAsync(String, CancellationToken) Read values with a given key from three bins. Declaration public Task<(string Key, T1 Value1, T2 Value2, T3 Value3)> ReadAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.ValueTuple < System.String , T1, T2, T3>> The key and associated values. | Improve this Doc View Source WriteAsync(String, T1, T2, T3, CancellationToken) Write values to three bins. Declaration public Task WriteAsync(string key, T1 value1, T2 value2, T3 value3, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. T3 value3 The value to write to the third bin. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. | Improve this Doc View Source WriteAsync(String, T1, T2, T3, TimeSpan, CancellationToken) Write values to three bins, with a specified time to live. Declaration public Task WriteAsync(string key, T1 value1, T2 value2, T3 value3, TimeSpan timeToLive, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key. T1 value1 The value to write to the first bin. T2 value2 The value to write to the second bin. T3 value3 The value to write to the third bin. TimeSpan timeToLive The time to live. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the operation. Implements IKeyValueStore<T1, T2, T3> IOverridable<TDataAccessObject, TConfiguration> IOverridable<TDataAccessObject, TConfiguration>"
  },
  "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStoreContext.html": {
    "href": "api/AeroSharp.DataAccess.KeyValueAccess.KeyValueStoreContext.html",
    "title": "Class KeyValueStoreContext | AeroSharp",
    "keywords": "Class KeyValueStoreContext Inheritance System.Object KeyValueStoreContext Namespace : AeroSharp.DataAccess.KeyValueAccess Assembly : AeroSharp.dll Syntax public class KeyValueStoreContext : object Constructors | Improve this Doc View Source KeyValueStoreContext(String[]) Declaration public KeyValueStoreContext(string[] bins) Parameters Type Name Description System.String [] bins Properties | Improve this Doc View Source Bins Declaration public string[] Bins { get; } Property Value Type Description System.String []"
  },
  "api/AeroSharp.DataAccess.ListAccess.html": {
    "href": "api/AeroSharp.DataAccess.ListAccess.html",
    "title": "Namespace AeroSharp.DataAccess.ListAccess | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.ListAccess Classes ListContext The context for the list, i.e. where it's going to be stored in Aerospike. Interfaces IList<T> Provides access to a single list stored remotely on Aerospike. IListBuilder An interface for building an IList<T> for a single list, or IListOperator<T> for multiple lists containing the same type. IListOperator<T> Provides access to list operations for lists containing type T stored remotely on Aerospike."
  },
  "api/AeroSharp.DataAccess.ListAccess.IList-1.html": {
    "href": "api/AeroSharp.DataAccess.ListAccess.IList-1.html",
    "title": "Interface IList<T> | AeroSharp",
    "keywords": "Interface IList<T> Provides access to a single list stored remotely on Aerospike. Namespace : AeroSharp.DataAccess.ListAccess Assembly : AeroSharp.dll Syntax public interface IList<T> Type Parameters Name Description T The type of the list's items. Methods | Improve this Doc View Source AppendAsync(T, CancellationToken) Asynchronously appends an item to the list. Declaration Task AppendAsync(T item, CancellationToken cancellationToken) Parameters Type Name Description T item The item to append. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task | Improve this Doc View Source AppendAsync(IEnumerable<T>, CancellationToken) Asynchronously appends items to the list. Declaration Task AppendAsync(IEnumerable<T> items, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items The items to append. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task | Improve this Doc View Source ClearAsync(CancellationToken) Asynchronously removes all items in the list. Declaration Task ClearAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task | Improve this Doc View Source GetByIndexAsync(Int32, CancellationToken) Asynchronously retrieves list element at the given index. Declaration Task<T> GetByIndexAsync(int index, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 index The index of the element to retrieve. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task <T> The element at the given index. | Improve this Doc View Source ReadAllAsync(CancellationToken) Asynchronously retrieves entire list. Declaration Task<IEnumerable<T>> ReadAllAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable <T>> The list. | Improve this Doc View Source RemoveByIndexAsync(Int32, CancellationToken) Asynchronously removes list item at given index. Declaration Task RemoveByIndexAsync(int index, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 index The index of the item to remove. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task | Improve this Doc View Source RemoveByValueAsync(T, CancellationToken) Asynchronously removes all items in the list with the given value. Declaration Task RemoveByValueAsync(T value, CancellationToken cancellationToken) Parameters Type Name Description T value The value to remove from the list. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task | Improve this Doc View Source SizeAsync(CancellationToken) Asynchronously retrieves the total number of elements in the list. Declaration Task<long> SizeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.Int64 > The total number of elements in the list. | Improve this Doc View Source WriteAsync(IEnumerable<T>, CancellationToken) Asynchronously writes items to the list. If a record already exists with the given key, it is replaced with the new list. Declaration Task WriteAsync(IEnumerable<T> items, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items The list items. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task"
  },
  "api/AeroSharp.DataAccess.ListAccess.IListBuilder.html": {
    "href": "api/AeroSharp.DataAccess.ListAccess.IListBuilder.html",
    "title": "Interface IListBuilder | AeroSharp",
    "keywords": "Interface IListBuilder An interface for building an IList<T> for a single list, or IListOperator<T> for multiple lists containing the same type. Inherited Members ICompressorBuilder<IListBuilder>.UseLZ4() ICompressorBuilder<IListBuilder>.WithCompressor(ICompressor) Namespace : AeroSharp.DataAccess.ListAccess Assembly : AeroSharp.dll Syntax public interface IListBuilder : ICompressorBuilder<IListBuilder> Methods | Improve this Doc View Source Build<T>() Builds an IListOperator<T> to read or write to lists containing type T . Declaration IListOperator<T> Build<T>() Returns Type Description IListOperator <T> An IListOperator<T> . Type Parameters Name Description T The data type stored in the list. | Improve this Doc View Source Build<T>(String) Builds an IList<T> to allow access to a single list containing type T with the provided key and a default bin name. Declaration IList<T> Build<T>(string key) Parameters Type Name Description System.String key The record key containing the list. Returns Type Description IList <T> An IList<T> . Type Parameters Name Description T The data type stored in the list. | Improve this Doc View Source Build<T>(String, String) Builds an IList<T> to allow access to a single list containing type T with the provided key and bin name. Declaration IList<T> Build<T>(string key, string bin) Parameters Type Name Description System.String key The record key containing the list. System.String bin Record bin where list is stored. Returns Type Description IList <T> An IList<T> . Type Parameters Name Description T The data type stored in the list. | Improve this Doc View Source WithListConfiguration(ListConfiguration) Optional: Provide a ListConfiguration with different settings than the default. Declaration IListBuilder WithListConfiguration(ListConfiguration listConfiguration) Parameters Type Name Description ListConfiguration listConfiguration A WriteConfiguration . Returns Type Description IListBuilder A IListBuilder . | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration IListBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration A WriteConfiguration . Returns Type Description IListBuilder A IListBuilder ."
  },
  "api/AeroSharp.DataAccess.ListAccess.IListOperator-1.html": {
    "href": "api/AeroSharp.DataAccess.ListAccess.IListOperator-1.html",
    "title": "Interface IListOperator<T> | AeroSharp",
    "keywords": "Interface IListOperator<T> Provides access to list operations for lists containing type T stored remotely on Aerospike. Namespace : AeroSharp.DataAccess.ListAccess Assembly : AeroSharp.dll Syntax public interface IListOperator<T> Type Parameters Name Description T The type of the list's items. Methods | Improve this Doc View Source AppendAsync(String, String, T, CancellationToken) Asynchronously appends an item to the list. Declaration Task AppendAsync(string key, string bin, T item, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. T item The item to append. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the asynchronous operation. | Improve this Doc View Source AppendAsync(String, String, IEnumerable<T>, CancellationToken) Asynchronously appends items to the list. Declaration Task AppendAsync(string key, string bin, IEnumerable<T> items, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. IEnumerable <T> items The items to append. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the asynchronous operation. | Improve this Doc View Source ClearAsync(String, String, CancellationToken) Asynchronously removes all items in the list. Declaration Task ClearAsync(string key, string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the asynchronous operation. | Improve this Doc View Source GetByIndexAsync(String, String, Int32, CancellationToken) Asynchronously retrieves list element at the given index. Declaration Task<T> GetByIndexAsync(string key, string bin, int index, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. System.Int32 index The index of the element to retrieve. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task <T> The element at the given index. | Improve this Doc View Source ReadAllAsync(String, String, CancellationToken) Asynchronously retrieves entire list. Declaration Task<IEnumerable<T>> ReadAllAsync(string key, string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < IEnumerable <T>> The list. | Improve this Doc View Source RemoveByIndexAsync(String, String, Int32, CancellationToken) Asynchronously removes list item at given index. Declaration Task RemoveByIndexAsync(string key, string bin, int index, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. System.Int32 index The index of the item to remove. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the asynchronous operation. | Improve this Doc View Source RemoveByValueAsync(String, String, T, CancellationToken) Asynchronously removes all items in the list with the given value. Declaration Task RemoveByValueAsync(string key, string bin, T value, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. T value The value to remove from the list. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the asynchronous operation. | Improve this Doc View Source SizeAsync(String, String, CancellationToken) Asynchronously retrieves the total number of elements in the list. Declaration Task<long> SizeAsync(string key, string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < System.Int64 > The total number of elements in the list. | Improve this Doc View Source WriteAsync(String, String, IEnumerable<T>, CancellationToken) Asynchronously writes items to the list. If a record already exists with the given key, it is replaced with the new list. Declaration Task WriteAsync(string key, string bin, IEnumerable<T> items, CancellationToken cancellationToken) Parameters Type Name Description System.String key The record key containing the list. System.String bin The bin where the list is stored. IEnumerable <T> items The list items. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task An awaitable representing the asynchronous operation."
  },
  "api/AeroSharp.DataAccess.ListAccess.ListContext.html": {
    "href": "api/AeroSharp.DataAccess.ListAccess.ListContext.html",
    "title": "Class ListContext | AeroSharp",
    "keywords": "Class ListContext The context for the list, i.e. where it's going to be stored in Aerospike. Inheritance System.Object ListContext Namespace : AeroSharp.DataAccess.ListAccess Assembly : AeroSharp.dll Syntax public class ListContext : object Constructors | Improve this Doc View Source ListContext(String) Constructs a list context with the provided key and a default bin name. Declaration public ListContext(string key) Parameters Type Name Description System.String key The key of the record that will store the list. | Improve this Doc View Source ListContext(String, String) Constructs a list context with the provided key and bin name. Declaration public ListContext(string key, string bin) Parameters Type Name Description System.String key The key of the record that will store the list. System.String bin The bin where the list will be stored. Properties | Improve this Doc View Source Bin Record bin where list is stored. Declaration public string Bin { get; } Property Value Type Description System.String | Improve this Doc View Source Key Key of record containing the list. Declaration public string Key { get; } Property Value Type Description System.String"
  },
  "api/AeroSharp.DataAccess.ListConfiguration.html": {
    "href": "api/AeroSharp.DataAccess.ListConfiguration.html",
    "title": "Class ListConfiguration | AeroSharp",
    "keywords": "Class ListConfiguration Inheritance System.Object ListConfiguration Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public class ListConfiguration : object Constructors | Improve this Doc View Source ListConfiguration() Declaration public ListConfiguration() Properties | Improve this Doc View Source AddUniqueOnly Declaration public bool AddUniqueOnly { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InsertBounded Declaration public bool InsertBounded { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NoFail Declaration public bool NoFail { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Ordering Declaration public bool Ordering { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Partial Declaration public bool Partial { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AeroSharp.DataAccess.MapAccess.html": {
    "href": "api/AeroSharp.DataAccess.MapAccess.html",
    "title": "Namespace AeroSharp.DataAccess.MapAccess | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.MapAccess Classes MapContext The context for the map, i.e. where it's going to be stored in Aerospike. Interfaces IMap<TKey, TValue> Provides access to a single map stored remotely on Aerospike with keys of type TKey and values of type TValue . IMapBuilder An interface for building an IMap<TKey, TValue> for interacting with a single map, or a IMapOperator<TKey, TValue> for interacting with multiple maps with the same key and value types. IMapOperator<TKey, TValue> Provides access to map operations for maps with keys of type TKey and values of type TValue ."
  },
  "api/AeroSharp.DataAccess.MapAccess.IMap-2.html": {
    "href": "api/AeroSharp.DataAccess.MapAccess.IMap-2.html",
    "title": "Interface IMap<TKey, TValue> | AeroSharp",
    "keywords": "Interface IMap<TKey, TValue> Provides access to a single map stored remotely on Aerospike with keys of type TKey and values of type TValue . Namespace : AeroSharp.DataAccess.MapAccess Assembly : AeroSharp.dll Syntax public interface IMap<TKey, TValue> Type Parameters Name Description TKey The type of the map key. TValue The type of the map value. Methods | Improve this Doc View Source DeleteAsync(CancellationToken) Asynchronously delete the map. Declaration Task DeleteAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task A task that represents the asynchronous operation of deleting the map. | Improve this Doc View Source GetByKeyAsync(TKey, CancellationToken) Asynchronously retrieve the map entry associated with the given key. Declaration Task<KeyValuePair<TKey, TValue>> GetByKeyAsync(TKey key, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair <TKey, TValue>> A which will complete with the value associated with the given key. | Improve this Doc View Source PutAsync(TKey, TValue, CancellationToken) Asynchronously add an entry to the map. Declaration Task PutAsync(TKey key, TValue value, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key. TValue value The value to add. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task A task that represents the asynchronous operation of adding the entry. | Improve this Doc View Source RemoveByKeyAsync(TKey, CancellationToken) Asynchronously remove the map entry associated with the given key and return it. Declaration Task<KeyValuePair<TKey, TValue>> RemoveByKeyAsync(TKey key, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair <TKey, TValue>> A which will complete with the value associated with the given key."
  },
  "api/AeroSharp.DataAccess.MapAccess.IMapBuilder.html": {
    "href": "api/AeroSharp.DataAccess.MapAccess.IMapBuilder.html",
    "title": "Interface IMapBuilder | AeroSharp",
    "keywords": "Interface IMapBuilder An interface for building an IMap<TKey, TValue> for interacting with a single map, or a IMapOperator<TKey, TValue> for interacting with multiple maps with the same key and value types. Inherited Members ISerializerBuilder<IMapBuilder>.UseProtobufSerializer() ISerializerBuilder<IMapBuilder>.UseMessagePackSerializer() ISerializerBuilder<IMapBuilder>.UseMessagePackSerializerWithLz4Compression() ISerializerBuilder<IMapBuilder>.WithSerializer(ISerializer) Namespace : AeroSharp.DataAccess.MapAccess Assembly : AeroSharp.dll Syntax public interface IMapBuilder : ISerializerBuilder<IMapBuilder> Methods | Improve this Doc View Source Build<TKey, TValue>() Builds an IMapOperator<TKey, TValue> to allow access to multiple maps with keys of type TKey and values of type TValue . Declaration IMapOperator<TKey, TValue> Build<TKey, TValue>() Returns Type Description IMapOperator <TKey, TValue> An IMapOperator<TKey, TValue> . Type Parameters Name Description TKey The data type of the keys stored in the maps. TValue The data type of the values stored in the maps. | Improve this Doc View Source Build<TKey, TValue>(String) Builds an IMap<TKey, TValue> to allow access to a single map with keys of type TKey and values of type TValue with the provided Aerospike record key and a default bin name. Declaration IMap<TKey, TValue> Build<TKey, TValue>(string key) Parameters Type Name Description System.String key The key of the Aerospike record containing the map. Returns Type Description IMap <TKey, TValue> An IMap<TKey, TValue> . Type Parameters Name Description TKey The data type of the keys stored in the map. TValue The data type of the values stored in the map. | Improve this Doc View Source Build<TKey, TValue>(String, String) Builds an IMap<TKey, TValue> to allow access to a single map with keys of type TKey and values of type TValue with the provided Aerospike record key and bin name. Declaration IMap<TKey, TValue> Build<TKey, TValue>(string key, string bin) Parameters Type Name Description System.String key The key of the Aerospike record containing the map. System.String bin The record bin where map is stored. Returns Type Description IMap <TKey, TValue> An IMap<TKey, TValue> . Type Parameters Name Description TKey The data type of the keys stored in the map. TValue The data type of the values stored in the map. | Improve this Doc View Source WithMapConfiguration(MapConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration IMapBuilder WithMapConfiguration(MapConfiguration mapConfiguration) Parameters Type Name Description MapConfiguration mapConfiguration A MapConfiguration . Returns Type Description IMapBuilder An IMapBuilder . | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration IMapBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration A WriteConfiguration . Returns Type Description IMapBuilder An IMapBuilder ."
  },
  "api/AeroSharp.DataAccess.MapAccess.IMapOperator-2.html": {
    "href": "api/AeroSharp.DataAccess.MapAccess.IMapOperator-2.html",
    "title": "Interface IMapOperator<TKey, TValue> | AeroSharp",
    "keywords": "Interface IMapOperator<TKey, TValue> Provides access to map operations for maps with keys of type TKey and values of type TValue . Namespace : AeroSharp.DataAccess.MapAccess Assembly : AeroSharp.dll Syntax public interface IMapOperator<TKey, TValue> Type Parameters Name Description TKey The type of the map key. TValue The type of the map value. Methods | Improve this Doc View Source DeleteAsync(String, CancellationToken) Asynchronously delete the map. Declaration Task DeleteAsync(string recordKey, CancellationToken cancellationToken) Parameters Type Name Description System.String recordKey The key of the Aerospike record containing the map. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task A task that represents the asynchronous operation of deleting the map. | Improve this Doc View Source GetByKeyAsync(String, String, TKey, CancellationToken) Asynchronously retrieve the map entry associated with the given key. Declaration Task<KeyValuePair<TKey, TValue>> GetByKeyAsync(string recordKey, string bin, TKey mapKey, CancellationToken cancellationToken) Parameters Type Name Description System.String recordKey The key of the Aerospike record containing the map. System.String bin The bin containing the map. TKey mapKey The map key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair <TKey, TValue>> A which will complete with the map entry associated with the given key. | Improve this Doc View Source PutAsync(String, String, TKey, TValue, CancellationToken) Asynchronously add an entry to the map. Declaration Task PutAsync(string recordKey, string bin, TKey mapKey, TValue value, CancellationToken cancellationToken) Parameters Type Name Description System.String recordKey The key of the Aerospike record containing the map. System.String bin The bin containing the map. TKey mapKey The map key. TValue value The value to add. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task A task that represents the asynchronous operation of adding the entry. | Improve this Doc View Source RemoveByKeyAsync(String, String, TKey, CancellationToken) Asynchronously remove the map entry associated with the given key and return it. Declaration Task<KeyValuePair<TKey, TValue>> RemoveByKeyAsync(string recordKey, string bin, TKey mapKey, CancellationToken cancellationToken) Parameters Type Name Description System.String recordKey The key of the Aerospike record containing the map. System.String bin The bin containing the map. TKey mapKey The map key. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. Returns Type Description Task < KeyValuePair <TKey, TValue>> A which will complete with the map entry associated with the given key."
  },
  "api/AeroSharp.DataAccess.MapAccess.MapContext.html": {
    "href": "api/AeroSharp.DataAccess.MapAccess.MapContext.html",
    "title": "Class MapContext | AeroSharp",
    "keywords": "Class MapContext The context for the map, i.e. where it's going to be stored in Aerospike. Inheritance System.Object MapContext Namespace : AeroSharp.DataAccess.MapAccess Assembly : AeroSharp.dll Syntax public sealed class MapContext : object Constructors | Improve this Doc View Source MapContext(String) Constructs a map context with the provided key and a default bin name. Declaration public MapContext(string key) Parameters Type Name Description System.String key The key of the record that will store the map. | Improve this Doc View Source MapContext(String, String) Constructs a map context with the provided key and bin name. Declaration public MapContext(string key, string bin) Parameters Type Name Description System.String key The key of the record that will store the map. System.String bin The bin where the map will be stored. Properties | Improve this Doc View Source Bin Record bin where map is stored. Declaration public string Bin { get; } Property Value Type Description System.String | Improve this Doc View Source Key Key of record containing the map. Declaration public string Key { get; } Property Value Type Description System.String"
  },
  "api/AeroSharp.DataAccess.MapConfiguration.html": {
    "href": "api/AeroSharp.DataAccess.MapConfiguration.html",
    "title": "Class MapConfiguration | AeroSharp",
    "keywords": "Class MapConfiguration Configuration that will help build a MapPolicy for Aerospike Map operations. Inheritance System.Object MapConfiguration Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public sealed class MapConfiguration : object Remarks See the documentation for more information on map write configuration flags. Constructors | Improve this Doc View Source MapConfiguration() Declaration public MapConfiguration() Properties | Improve this Doc View Source AllowPartial Allow other valid map items to be committed if a map item is denied due to write flag constraints. Declaration public bool AllowPartial { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CreateOnly If the key already exists, the item will be denied. If the key does not exist, a new item will be created. Declaration public bool CreateOnly { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NoFail Do not raise error if a map item is denied due to write flag constraints. Declaration public bool NoFail { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Order The ordering of the map. Declaration public MapOrder Order { get; set; } Property Value Type Description MapOrder | Improve this Doc View Source UpdateOnly If the key already exists, the item will be overwritten. If the key does not exist, the item will be denied. Declaration public bool UpdateOnly { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AeroSharp.DataAccess.Operations.html": {
    "href": "api/AeroSharp.DataAccess.Operations.html",
    "title": "Namespace AeroSharp.DataAccess.Operations | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.Operations Interfaces IBlobOperationBuilder IListOperationBuilder IOperationBuilder IOperator Interface for the operator of multi-operation transactions. IOperatorBuilder An interface for building an IOperator . ISetScanOperator Defines the primary interface needed to perform set scan operations."
  },
  "api/AeroSharp.DataAccess.Operations.IBlobOperationBuilder.html": {
    "href": "api/AeroSharp.DataAccess.Operations.IBlobOperationBuilder.html",
    "title": "Interface IBlobOperationBuilder | AeroSharp",
    "keywords": "Interface IBlobOperationBuilder Namespace : AeroSharp.DataAccess.Operations Assembly : AeroSharp.dll Syntax public interface IBlobOperationBuilder Methods | Improve this Doc View Source ReadAsync<T>(String, CancellationToken) Declaration Task<T> ReadAsync<T>(string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String bin CancellationToken cancellationToken Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source ReadAsync<T1, T2>(String, String, CancellationToken) Declaration Task<(T1, T2)> ReadAsync<T1, T2>(string bin1, string bin2, CancellationToken cancellationToken) Parameters Type Name Description System.String bin1 System.String bin2 CancellationToken cancellationToken Returns Type Description Task < System.ValueTuple <T1, T2>> Type Parameters Name Description T1 T2 | Improve this Doc View Source ReadAsync<T1, T2, T3>(String, String, String, CancellationToken) Declaration Task<(T1, T2, T3)> ReadAsync<T1, T2, T3>(string bin1, string bin2, string bin3, CancellationToken cancellationToken) Parameters Type Name Description System.String bin1 System.String bin2 System.String bin3 CancellationToken cancellationToken Returns Type Description Task < System.ValueTuple <T1, T2, T3>> Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source Write<T>(String, T) Declaration IOperationBuilder Write<T>(string bin, T data) Parameters Type Name Description System.String bin T data Returns Type Description IOperationBuilder Type Parameters Name Description T"
  },
  "api/AeroSharp.DataAccess.Operations.IListOperationBuilder.html": {
    "href": "api/AeroSharp.DataAccess.Operations.IListOperationBuilder.html",
    "title": "Interface IListOperationBuilder | AeroSharp",
    "keywords": "Interface IListOperationBuilder Namespace : AeroSharp.DataAccess.Operations Assembly : AeroSharp.dll Syntax public interface IListOperationBuilder Methods | Improve this Doc View Source Append<T>(String, T) Declaration IOperationBuilder Append<T>(string bin, T item) Parameters Type Name Description System.String bin T item Returns Type Description IOperationBuilder Type Parameters Name Description T | Improve this Doc View Source Append<T>(String, T, ListConfiguration) Declaration IOperationBuilder Append<T>(string bin, T item, ListConfiguration listConfiguration) Parameters Type Name Description System.String bin T item ListConfiguration listConfiguration Returns Type Description IOperationBuilder Type Parameters Name Description T | Improve this Doc View Source Append<T>(String, IEnumerable<T>) Declaration IOperationBuilder Append<T>(string bin, IEnumerable<T> items) Parameters Type Name Description System.String bin IEnumerable <T> items Returns Type Description IOperationBuilder Type Parameters Name Description T | Improve this Doc View Source Append<T>(String, IEnumerable<T>, ListConfiguration) Declaration IOperationBuilder Append<T>(string bin, IEnumerable<T> items, ListConfiguration listConfiguration) Parameters Type Name Description System.String bin IEnumerable <T> items ListConfiguration listConfiguration Returns Type Description IOperationBuilder Type Parameters Name Description T | Improve this Doc View Source Clear(String) Declaration IOperationBuilder Clear(string bin) Parameters Type Name Description System.String bin Returns Type Description IOperationBuilder | Improve this Doc View Source GetByIndexAsync<T>(String, Int32, CancellationToken) Declaration Task<T> GetByIndexAsync<T>(string bin, int index, CancellationToken cancellationToken) Parameters Type Name Description System.String bin System.Int32 index CancellationToken cancellationToken Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source ReadAllAsync<T>(String, CancellationToken) Declaration Task<IEnumerable<T>> ReadAllAsync<T>(string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String bin CancellationToken cancellationToken Returns Type Description Task < IEnumerable <T>> Type Parameters Name Description T | Improve this Doc View Source RemoveByIndex(String, Int32) Declaration IOperationBuilder RemoveByIndex(string bin, int index) Parameters Type Name Description System.String bin System.Int32 index Returns Type Description IOperationBuilder | Improve this Doc View Source RemoveByValue<T>(String, T) Declaration IOperationBuilder RemoveByValue<T>(string bin, T value) Parameters Type Name Description System.String bin T value Returns Type Description IOperationBuilder Type Parameters Name Description T | Improve this Doc View Source SizeAsync(String, CancellationToken) Declaration Task<long> SizeAsync(string bin, CancellationToken cancellationToken) Parameters Type Name Description System.String bin CancellationToken cancellationToken Returns Type Description Task < System.Int64 > | Improve this Doc View Source Write<T>(String, IEnumerable<T>) Declaration IOperationBuilder Write<T>(string bin, IEnumerable<T> items) Parameters Type Name Description System.String bin IEnumerable <T> items Returns Type Description IOperationBuilder Type Parameters Name Description T | Improve this Doc View Source Write<T>(String, IEnumerable<T>, ListConfiguration) Declaration IOperationBuilder Write<T>(string bin, IEnumerable<T> items, ListConfiguration listConfiguration) Parameters Type Name Description System.String bin IEnumerable <T> items ListConfiguration listConfiguration Returns Type Description IOperationBuilder Type Parameters Name Description T"
  },
  "api/AeroSharp.DataAccess.Operations.IOperationBuilder.html": {
    "href": "api/AeroSharp.DataAccess.Operations.IOperationBuilder.html",
    "title": "Interface IOperationBuilder | AeroSharp",
    "keywords": "Interface IOperationBuilder Namespace : AeroSharp.DataAccess.Operations Assembly : AeroSharp.dll Syntax public interface IOperationBuilder Properties | Improve this Doc View Source Blob Declaration IBlobOperationBuilder Blob { get; } Property Value Type Description IBlobOperationBuilder | Improve this Doc View Source List Declaration IListOperationBuilder List { get; } Property Value Type Description IListOperationBuilder Methods | Improve this Doc View Source ExecuteAsync(CancellationToken) Declaration Task ExecuteAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task"
  },
  "api/AeroSharp.DataAccess.Operations.IOperator.html": {
    "href": "api/AeroSharp.DataAccess.Operations.IOperator.html",
    "title": "Interface IOperator | AeroSharp",
    "keywords": "Interface IOperator Interface for the operator of multi-operation transactions. Namespace : AeroSharp.DataAccess.Operations Assembly : AeroSharp.dll Syntax public interface IOperator Methods | Improve this Doc View Source Key(String) Configures an IOperationBuilder to operate on a single record. Declaration IOperationBuilder Key(string key) Parameters Type Name Description System.String key The key of the record operate on. Returns Type Description IOperationBuilder The configured IOperationBuilder ."
  },
  "api/AeroSharp.DataAccess.Operations.IOperatorBuilder.html": {
    "href": "api/AeroSharp.DataAccess.Operations.IOperatorBuilder.html",
    "title": "Interface IOperatorBuilder | AeroSharp",
    "keywords": "Interface IOperatorBuilder An interface for building an IOperator . Inherited Members ICompressorBuilder<IOperatorBuilder>.UseLZ4() ICompressorBuilder<IOperatorBuilder>.WithCompressor(ICompressor) Namespace : AeroSharp.DataAccess.Operations Assembly : AeroSharp.dll Syntax public interface IOperatorBuilder : ICompressorBuilder<IOperatorBuilder> Methods | Improve this Doc View Source Build() Creates a new IOperator instance with the previously set properties. Declaration IOperator Build() Returns Type Description IOperator A IOperator instance. | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration IOperatorBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration A WriteConfiguration . Returns Type Description IOperatorBuilder A IOperatorBuilder ."
  },
  "api/AeroSharp.DataAccess.Operations.ISetScanOperator.html": {
    "href": "api/AeroSharp.DataAccess.Operations.ISetScanOperator.html",
    "title": "Interface ISetScanOperator | AeroSharp",
    "keywords": "Interface ISetScanOperator Defines the primary interface needed to perform set scan operations. Namespace : AeroSharp.DataAccess.Operations Assembly : AeroSharp.dll Syntax public interface ISetScanOperator Methods | Improve this Doc View Source ScanSet(IEnumerable<String>, DataContext, ScanConfiguration, Action<Key, Record>) Synchronously scan a set with a callback. Declaration void ScanSet(IEnumerable<string> bins, DataContext context, ScanConfiguration configuration, Action<Key, Record> callback) Parameters Type Name Description IEnumerable < System.String > bins The bins to fetch along with the scan, if needed. DataContext context The data context to perform the operations on. ScanConfiguration configuration The scan configuration. Action < Key , Record > callback The operation to perform."
  },
  "api/AeroSharp.DataAccess.Policies.html": {
    "href": "api/AeroSharp.DataAccess.Policies.html",
    "title": "Namespace AeroSharp.DataAccess.Policies | AeroSharp",
    "keywords": "Namespace AeroSharp.DataAccess.Policies Classes ListConfigurationToListPolicyMapper ReadConfigurationToBatchPolicyMapper ScanConfigurationToScanPolicyMapper WriteConfigurationToWritePolicyMapper A class for mapping WriteConfiguration values to an Aerospike WritePolicy."
  },
  "api/AeroSharp.DataAccess.Policies.ListConfigurationToListPolicyMapper.html": {
    "href": "api/AeroSharp.DataAccess.Policies.ListConfigurationToListPolicyMapper.html",
    "title": "Class ListConfigurationToListPolicyMapper | AeroSharp",
    "keywords": "Class ListConfigurationToListPolicyMapper Inheritance System.Object ListConfigurationToListPolicyMapper Namespace : AeroSharp.DataAccess.Policies Assembly : AeroSharp.dll Syntax public static class ListConfigurationToListPolicyMapper : object Methods | Improve this Doc View Source MapToPolicy(ListConfiguration) Declaration public static ListPolicy MapToPolicy(ListConfiguration config) Parameters Type Name Description ListConfiguration config Returns Type Description ListPolicy"
  },
  "api/AeroSharp.DataAccess.Policies.ReadConfigurationToBatchPolicyMapper.html": {
    "href": "api/AeroSharp.DataAccess.Policies.ReadConfigurationToBatchPolicyMapper.html",
    "title": "Class ReadConfigurationToBatchPolicyMapper | AeroSharp",
    "keywords": "Class ReadConfigurationToBatchPolicyMapper Inheritance System.Object ReadConfigurationToBatchPolicyMapper Namespace : AeroSharp.DataAccess.Policies Assembly : AeroSharp.dll Syntax public static class ReadConfigurationToBatchPolicyMapper : object Methods | Improve this Doc View Source MapToPolicy(ReadConfiguration) Declaration public static BatchPolicy MapToPolicy(ReadConfiguration configuration) Parameters Type Name Description ReadConfiguration configuration Returns Type Description BatchPolicy"
  },
  "api/AeroSharp.DataAccess.Policies.ScanConfigurationToScanPolicyMapper.html": {
    "href": "api/AeroSharp.DataAccess.Policies.ScanConfigurationToScanPolicyMapper.html",
    "title": "Class ScanConfigurationToScanPolicyMapper | AeroSharp",
    "keywords": "Class ScanConfigurationToScanPolicyMapper Inheritance System.Object ScanConfigurationToScanPolicyMapper Namespace : AeroSharp.DataAccess.Policies Assembly : AeroSharp.dll Syntax public static class ScanConfigurationToScanPolicyMapper : object Methods | Improve this Doc View Source MapToPolicy(ScanConfiguration) Declaration public static ScanPolicy MapToPolicy(ScanConfiguration configuration) Parameters Type Name Description ScanConfiguration configuration Returns Type Description ScanPolicy"
  },
  "api/AeroSharp.DataAccess.Policies.WriteConfigurationToWritePolicyMapper.html": {
    "href": "api/AeroSharp.DataAccess.Policies.WriteConfigurationToWritePolicyMapper.html",
    "title": "Class WriteConfigurationToWritePolicyMapper | AeroSharp",
    "keywords": "Class WriteConfigurationToWritePolicyMapper A class for mapping WriteConfiguration values to an Aerospike WritePolicy. Inheritance System.Object WriteConfigurationToWritePolicyMapper Namespace : AeroSharp.DataAccess.Policies Assembly : AeroSharp.dll Syntax public static class WriteConfigurationToWritePolicyMapper : object Methods | Improve this Doc View Source MapToPolicy(WriteConfiguration) Performs the mapping between WriteConfiguration values to an Aerospike WritePolicy. Declaration public static WritePolicy MapToPolicy(WriteConfiguration configuration) Parameters Type Name Description WriteConfiguration configuration A WriteConfiguration . Returns Type Description WritePolicy An Aerospike WritePolicy."
  },
  "api/AeroSharp.DataAccess.ReadConfiguration.html": {
    "href": "api/AeroSharp.DataAccess.ReadConfiguration.html",
    "title": "Class ReadConfiguration | AeroSharp",
    "keywords": "Class ReadConfiguration A class for storing and passing the configurable settings for reads. Inheritance System.Object ReadConfiguration Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public class ReadConfiguration : object Constructors | Improve this Doc View Source ReadConfiguration() Creates a new instance of the ReadConfiguration class. Declaration public ReadConfiguration() | Improve this Doc View Source ReadConfiguration(ReadConfiguration) Copy constructor. Declaration public ReadConfiguration(ReadConfiguration other) Parameters Type Name Description ReadConfiguration other Configuration to copy. Properties | Improve this Doc View Source MaxConcurrentBatches The max number of concurrent tasks to use while reading batches (The batch size is set by the ReadBatchSize property). If set to 1, batches are read sequentially. Must be >= 1. Declaration public int MaxConcurrentBatches { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxConcurrentThreads Maximum number of concurrent synchronous batch node request threads to server nodes. Asynchronous batch requests ignore this field and always issue all node requests in parallel. Must be >= 0. Declaration public int MaxConcurrentThreads { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ReadBatchSize The number of records to batch for reads. Declaration public int ReadBatchSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RetryCount Maximum number of retries before aborting the current transaction.The initial attempt is not counted as a retry. Declaration public int RetryCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SendKey Send user defined key in addition to hash digest on both reads and writes. If the key is sent on a write, the key will be stored with the record on the server. Declaration public bool SendKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SendSetName Send set name field to server for every key in the batch for batch index protocol. This is only necessary when authentication is enabled and security roles are defined on a per set basis. Declaration public bool SendSetName { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SleepBetweenRetries Milliseconds to sleep between retries. Enter zero to skip sleep. This field is ignored when maxRetries is zero. The sleep only occurs on connection errors and server timeouts which suggest a node is down and the cluster is reforming. The sleep does not occur when the client's socketTimeout expires. Reads do not have to sleep when a node goes down because the cluster does not shut out reads during cluster reformation. The default for reads is zero. Declaration public TimeSpan SleepBetweenRetries { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source SocketTimeout Socket idle timeout in milliseconds when processing a database command. Declaration public TimeSpan SocketTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source TotalTimeout Total transaction timeout in milliseconds. Declaration public TimeSpan TotalTimeout { get; set; } Property Value Type Description TimeSpan"
  },
  "api/AeroSharp.DataAccess.ScanConfiguration.html": {
    "href": "api/AeroSharp.DataAccess.ScanConfiguration.html",
    "title": "Class ScanConfiguration | AeroSharp",
    "keywords": "Class ScanConfiguration A class for storing and passing the configurable settings for scans. Inheritance System.Object ScanConfiguration Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public class ScanConfiguration : object Constructors | Improve this Doc View Source ScanConfiguration() Creates a new instance of the ScanConfiguration class. Declaration public ScanConfiguration() | Improve this Doc View Source ScanConfiguration(ScanConfiguration) Copy constructor. Declaration public ScanConfiguration(ScanConfiguration other) Parameters Type Name Description ScanConfiguration other The configuration to copy. Properties | Improve this Doc View Source ConcurrentNodes Whether or not scan requests should be issued in parallel. Declaration public bool ConcurrentNodes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludeBinData Whether or not the data inside the bins should be retrieved. Declaration public bool IncludeBinData { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxConcurrentNodes The maximum number of concurrent requests to server nodes at any point in time. Declaration public int MaxConcurrentNodes { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxRecords The approximate number of records to return to the client. Set to 0 to specify no limit. Declaration public int MaxRecords { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RecordsPerSecond Limits the number of records per second per server. Ignored if 0. Declaration public int RecordsPerSecond { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SocketTimeout The socket idle timeout. Declaration public TimeSpan SocketTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source TotalTimeout The total transaction timeout. Set to TimeSpan.Zero for unlimited. Declaration public TimeSpan TotalTimeout { get; set; } Property Value Type Description TimeSpan"
  },
  "api/AeroSharp.DataAccess.TimeToLiveBehavior.html": {
    "href": "api/AeroSharp.DataAccess.TimeToLiveBehavior.html",
    "title": "Enum TimeToLiveBehavior | AeroSharp",
    "keywords": "Enum TimeToLiveBehavior Defines behavior of time-to-live configuration parameter. Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public enum TimeToLiveBehavior : int Fields Name Description DoNotUpdate Do not update records' time-to-live on writes. SetOnWrite Set records' time-to-live to the configured TimeToLive. UseMaxExpiration Use the maximum time to live configured on the Aerospike server. UseNamespaceDefault Use the namespace's default time-to-live."
  },
  "api/AeroSharp.DataAccess.WriteConfiguration.html": {
    "href": "api/AeroSharp.DataAccess.WriteConfiguration.html",
    "title": "Class WriteConfiguration | AeroSharp",
    "keywords": "Class WriteConfiguration A class for storing and passing the configurable settings for writes. Inheritance System.Object WriteConfiguration Namespace : AeroSharp.DataAccess Assembly : AeroSharp.dll Syntax public class WriteConfiguration : object Constructors | Improve this Doc View Source WriteConfiguration() Creates a new instance of the WriteConfiguration class. Declaration public WriteConfiguration() | Improve this Doc View Source WriteConfiguration(WriteConfiguration) Copy constructor. Declaration public WriteConfiguration(WriteConfiguration other) Parameters Type Name Description WriteConfiguration other The other configuration to copy. Properties | Improve this Doc View Source CommitLevel Desired consistency guarantee when committing a transaction on the server. The default (COMMIT_ALL) indicates that the server should wait for master and all replica commits to be successful before returning success to the client. Declaration public CommitLevel CommitLevel { get; set; } Property Value Type Description CommitLevel | Improve this Doc View Source DurableDelete If the transaction results in a record deletion, leave a tombstone for the record. This prevents deleted records from reappearing after node failures. Declaration public bool DurableDelete { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. If a write operation is creating a record, the expected generation would be 0. This field is only relevant when generationPolicy is not NONE. Declaration public int Generation { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source GenerationPolicy Qualify how to handle record writes based on record generation. The default (NONE) indicates that the generation is not used to restrict writes. Declaration public GenerationPolicy GenerationPolicy { get; set; } Property Value Type Description GenerationPolicy | Improve this Doc View Source MaxRetries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. Declaration public int MaxRetries { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RecordExistsAction Qualify how to handle writes where the record already exists. Declaration public RecordExistsAction RecordExistsAction { get; set; } Property Value Type Description RecordExistsAction | Improve this Doc View Source RequestTimeout Socket idle timeout in milliseconds when processing a database command. If socketTimeout is zero and totalTimeout is non-zero, then socketTimeout will be set to totalTimeout.If both socketTimeout and totalTimeout are non-zero and socketTimeout > totalTimeout, then socketTimeout will be set to totalTimeout.If both socketTimeout and totalTimeout are zero, then there will be no socket idle limit. If socketTimeout is not zero and the socket has been idle for at least socketTimeout, both maxRetries and totalTimeout are checked. If maxRetries and totalTimeout are not exceeded, the transaction is retried. Declaration public TimeSpan RequestTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source SendKey Send user defined key in addition to hash digest on both reads and writes. If the key is sent on a write, the key will be stored with the record on the server. Declaration public bool SendKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SleepBetweenRetries Milliseconds to sleep between retries. Enter zero to skip sleep. This field is ignored when maxRetries is zero. Declaration public TimeSpan SleepBetweenRetries { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source TimeToLive Seconds record will live before being removed by the server. Declaration public TimeSpan TimeToLive { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source TimeToLiveBehavior Defines behavior of time-to-live configuration parameter. Declaration public TimeToLiveBehavior TimeToLiveBehavior { get; set; } Property Value Type Description TimeToLiveBehavior | Improve this Doc View Source TotalTimeout Total transaction timeout in milliseconds. The totalTimeout is tracked on the client and sent to the server along with the transaction in the wire protocol.The client will most likely timeout first, but the server also has the capability to timeout the transaction Declaration public TimeSpan TotalTimeout { get; set; } Property Value Type Description TimeSpan"
  },
  "api/AeroSharp.Enums.CommitLevel.html": {
    "href": "api/AeroSharp.Enums.CommitLevel.html",
    "title": "Enum CommitLevel | AeroSharp",
    "keywords": "Enum CommitLevel Desired consistency guarantee when committing a transaction on the server. Namespace : AeroSharp.Enums Assembly : AeroSharp.dll Syntax public enum CommitLevel : int Fields Name Description CommitAll Server should wait until successfully committing master and all replicas. CommitMaster Server should wait until successfully committing master only."
  },
  "api/AeroSharp.Enums.GenerationPolicy.html": {
    "href": "api/AeroSharp.Enums.GenerationPolicy.html",
    "title": "Enum GenerationPolicy | AeroSharp",
    "keywords": "Enum GenerationPolicy How to handle record writes based on record generation. Namespace : AeroSharp.Enums Assembly : AeroSharp.dll Syntax public enum GenerationPolicy : int Fields Name Description EXPECT_GEN_EQUAL Update/delete record if expected generation is equal to server generation. Otherwise, fail. EXPECT_GEN_GT Update/delete record if expected generation greater than the server generation. Otherwise, fail. This is useful for restore after backup. NONE Do not use record generation to restrict writes."
  },
  "api/AeroSharp.Enums.html": {
    "href": "api/AeroSharp.Enums.html",
    "title": "Namespace AeroSharp.Enums | AeroSharp",
    "keywords": "Namespace AeroSharp.Enums Enums CommitLevel Desired consistency guarantee when committing a transaction on the server. GenerationPolicy How to handle record writes based on record generation. MaxCommandAction An analog to Aerospike.Client.MaxCommandAction RecordExistsAction How to handle writes when the record already exists."
  },
  "api/AeroSharp.Enums.MaxCommandAction.html": {
    "href": "api/AeroSharp.Enums.MaxCommandAction.html",
    "title": "Enum MaxCommandAction | AeroSharp",
    "keywords": "Enum MaxCommandAction An analog to Aerospike.Client.MaxCommandAction Namespace : AeroSharp.Enums Assembly : AeroSharp.dll Syntax public enum MaxCommandAction : int Fields Name Description BLOCK Block until a previous command completes. DELAY Delay until a previous command completes. REJECT Reject database command."
  },
  "api/AeroSharp.Enums.RecordExistsAction.html": {
    "href": "api/AeroSharp.Enums.RecordExistsAction.html",
    "title": "Enum RecordExistsAction | AeroSharp",
    "keywords": "Enum RecordExistsAction How to handle writes when the record already exists. Namespace : AeroSharp.Enums Assembly : AeroSharp.dll Syntax public enum RecordExistsAction : int Fields Name Description CreateOnly Create only. Fail if record exists. Replace Create or update record. Delete existing bins not referenced by write command bins. ReplaceOnly Update record only. Fail if record does not exist. Delete existing bins not referenced by write command bins. Update Create or update record. Merge write command bins with existing bins. UpdateOnly Update record only. Fail if record does not exist. Merge write command bins with existing bins."
  },
  "api/AeroSharp.html": {
    "href": "api/AeroSharp.html",
    "title": "Namespace AeroSharp | AeroSharp",
    "keywords": "Namespace AeroSharp Classes ClientProviderBuilder Configures and builds an IClientProvider KeyOperatorBuilder Configures and builds an IKeyOperator for interacting with records by key. KeyValueStoreBuilder A class for building a IKeyValueStore for interacting with record bins. ListBuilder Configures and builds an IListOperator<T> . MapBuilder An interface for building an IMap<TKey, TValue> for interacting with a single map, or a IMapOperator<TKey, TValue> for interacting with multiple maps with the same key and value types. OperatorBuilder Configures and builds an IOperator for executing multi-operation transactions on a single record. SetTruncatorBuilder A class for building an ISetTruncator ."
  },
  "api/AeroSharp.KeyOperatorBuilder.html": {
    "href": "api/AeroSharp.KeyOperatorBuilder.html",
    "title": "Class KeyOperatorBuilder | AeroSharp",
    "keywords": "Class KeyOperatorBuilder Configures and builds an IKeyOperator for interacting with records by key. Inheritance System.Object KeyOperatorBuilder Implements IDataContextBuilder < IKeyOperatorBuilder > IKeyOperatorBuilder Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public class KeyOperatorBuilder : object, IDataContextBuilder<IKeyOperatorBuilder>, IKeyOperatorBuilder Methods | Improve this Doc View Source Build() Creates a new IKeyOperator instance with the previously set properties. Declaration public IKeyOperator Build() Returns Type Description IKeyOperator A IKeyOperator instance. | Improve this Doc View Source Configure(IClientProvider) Configure a new KeyOperatorBuilder . Declaration public static IDataContextBuilder<IKeyOperatorBuilder> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A IClientProvider instance. Returns Type Description IDataContextBuilder < IKeyOperatorBuilder > A IDataContextBuilder<TNextBuilder> . | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration public IKeyOperatorBuilder WithDataContext(DataContext context) Parameters Type Name Description DataContext context Returns Type Description IKeyOperatorBuilder An instance of the next builder. Implements IDataContextBuilder<TNextBuilder> IKeyOperatorBuilder"
  },
  "api/AeroSharp.KeyValueStoreBuilder.html": {
    "href": "api/AeroSharp.KeyValueStoreBuilder.html",
    "title": "Class KeyValueStoreBuilder | AeroSharp",
    "keywords": "Class KeyValueStoreBuilder A class for building a IKeyValueStore for interacting with record bins. Inheritance System.Object KeyValueStoreBuilder Implements IKeyValueStoreBuilder ICompressorBuilder < IKeyValueStoreBuilder > IDataContextBuilder < ISerializerBuilder < IKeyValueStoreBuilder >> ISerializerBuilder < IKeyValueStoreBuilder > Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public class KeyValueStoreBuilder : object, IKeyValueStoreBuilder, ICompressorBuilder<IKeyValueStoreBuilder>, IDataContextBuilder<ISerializerBuilder<IKeyValueStoreBuilder>>, ISerializerBuilder<IKeyValueStoreBuilder> Methods | Improve this Doc View Source Build() Builds a IKeyValueStore to read or write any serializable data type in any bin. Declaration public IKeyValueStore Build() Returns Type Description IKeyValueStore A IKeyValueStore . | Improve this Doc View Source Build<T>() Builds a IKeyValueStore<T> to read or write one data type in a single bin. Declaration public IKeyValueStore<T> Build<T>() Returns Type Description IKeyValueStore <T> A IKeyValueStore<T> IKeyValueStore<T> . Type Parameters Name Description T The data type stored in the bin. | Improve this Doc View Source Build<T>(String) Builds a IKeyValueStore<T> to read or write one data type in a single bin. Declaration public IKeyValueStore<T> Build<T>(string bin) Parameters Type Name Description System.String bin The name of the bin to operate on. Returns Type Description IKeyValueStore <T> A IKeyValueStore<T> IKeyValueStore<T> . Type Parameters Name Description T The data type stored in the bin. | Improve this Doc View Source Build<T1, T2>() Builds a IKeyValueStore<T1, T2> to read or write two types in two bins. Declaration public IKeyValueStore<T1, T2> Build<T1, T2>() Returns Type Description IKeyValueStore <T1, T2> A IKeyValueStore<T1, T2> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. | Improve this Doc View Source Build<T1, T2>(String, String) Builds a IKeyValueStore<T1, T2> to read or write two types in two bins. Declaration public IKeyValueStore<T1, T2> Build<T1, T2>(string bin1, string bin2) Parameters Type Name Description System.String bin1 The name of the first bin to operate on. System.String bin2 The name of the second bin to operate on. Returns Type Description IKeyValueStore <T1, T2> A IKeyValueStore<T1, T2> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. | Improve this Doc View Source Build<T1, T2, T3>() Builds a IKeyValueStore<T1, T2, T3> to read or write three types in three bins. Declaration public IKeyValueStore<T1, T2, T3> Build<T1, T2, T3>() Returns Type Description IKeyValueStore <T1, T2, T3> A IKeyValueStore<T1, T2, T3> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. T3 The data type stored in the third bin. | Improve this Doc View Source Build<T1, T2, T3>(String, String, String) Builds a IKeyValueStore<T1, T2, T3> to read or write three types in three bins. Declaration public IKeyValueStore<T1, T2, T3> Build<T1, T2, T3>(string bin1, string bin2, string bin3) Parameters Type Name Description System.String bin1 The name of the first bin to operate on. System.String bin2 The name of the second bin to operate on. System.String bin3 The name of the third bin to operate on. Returns Type Description IKeyValueStore <T1, T2, T3> A IKeyValueStore<T1, T2, T3> . Type Parameters Name Description T1 The data type stored in the first bin. T2 The data type stored in the second bin. T3 The data type stored in the third bin. | Improve this Doc View Source Configure(IClientProvider) Configure a new AeroSharp.DataAccess.KeyValueAccess.KeyValueStore . Declaration public static IDataContextBuilder<ISerializerBuilder<IKeyValueStoreBuilder>> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A client provider. Returns Type Description IDataContextBuilder < ISerializerBuilder < IKeyValueStoreBuilder >> A IKeyValueStoreBuilder instance. | Improve this Doc View Source UseLZ4() Uses the default AeroSharp.Compression.LZ4Compressor . Declaration public IKeyValueStoreBuilder UseLZ4() Returns Type Description IKeyValueStoreBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializer() Use the built-in AeroSharp.Serialization.MessagePackSerializer . Declaration public IKeyValueStoreBuilder UseMessagePackSerializer() Returns Type Description IKeyValueStoreBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializerWithLz4Compression() Use the built-in AeroSharp.Serialization.MessagePackSerializerWithCompression . Declaration public IKeyValueStoreBuilder UseMessagePackSerializerWithLz4Compression() Returns Type Description IKeyValueStoreBuilder An instance of the next builder. | Improve this Doc View Source UseProtobufSerializer() Use the default AeroSharp.Serialization.ProtobufSerializer . Declaration public IKeyValueStoreBuilder UseProtobufSerializer() Returns Type Description IKeyValueStoreBuilder An instance of the next builder. | Improve this Doc View Source WithCompressor(ICompressor) Use a provided instance of an ICompressor . Declaration public IKeyValueStoreBuilder WithCompressor(ICompressor compressor) Parameters Type Name Description ICompressor compressor The ICompressor instance. Returns Type Description IKeyValueStoreBuilder An instance of the next builder. | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration public ISerializerBuilder<IKeyValueStoreBuilder> WithDataContext(DataContext context) Parameters Type Name Description DataContext context Returns Type Description ISerializerBuilder < IKeyValueStoreBuilder > An instance of the next builder. | Improve this Doc View Source WithPlugin(IKeyValueStorePlugin) Optional: Provide IKeyValueStorePlugin for event callbacks on reads and writes. Declaration public IKeyValueStoreBuilder WithPlugin(IKeyValueStorePlugin keyValueStorePlugin) Parameters Type Name Description IKeyValueStorePlugin keyValueStorePlugin An implementation of IKeyValueStorePlugin . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . | Improve this Doc View Source WithReadConfiguration(ReadConfiguration) Optional: Provide a ReadConfiguration with different settings than the default. Declaration public IKeyValueStoreBuilder WithReadConfiguration(ReadConfiguration readConfiguration) Parameters Type Name Description ReadConfiguration readConfiguration A ReadConfiguration . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . | Improve this Doc View Source WithReadModifyWriteConfiguration(ReadModifyWritePolicy) Optional: Provide ReadModifyWritePolicy for read modify write pattern implementation on writes. Declaration public IKeyValueStoreBuilder WithReadModifyWriteConfiguration(ReadModifyWritePolicy readModifyWritePolicy) Parameters Type Name Description ReadModifyWritePolicy readModifyWritePolicy Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . | Improve this Doc View Source WithSerializer(ISerializer) Use a provided instance of an ISerializer . Declaration public IKeyValueStoreBuilder WithSerializer(ISerializer serializer) Parameters Type Name Description ISerializer serializer The ISerializer instance. Returns Type Description IKeyValueStoreBuilder An instance of the next builder. | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration public IKeyValueStoreBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration A WriteConfiguration . Returns Type Description IKeyValueStoreBuilder A IKeyValueStoreBuilder . Implements IKeyValueStoreBuilder ICompressorBuilder<TNextBuilder> IDataContextBuilder<TNextBuilder> ISerializerBuilder<TNextBuilder>"
  },
  "api/AeroSharp.ListBuilder.html": {
    "href": "api/AeroSharp.ListBuilder.html",
    "title": "Class ListBuilder | AeroSharp",
    "keywords": "Class ListBuilder Configures and builds an IListOperator<T> . Inheritance System.Object ListBuilder Implements IDataContextBuilder < ISerializerBuilder < IListBuilder >> ISerializerBuilder < IListBuilder > IListBuilder ICompressorBuilder < IListBuilder > Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public class ListBuilder : object, IDataContextBuilder<ISerializerBuilder<IListBuilder>>, ISerializerBuilder<IListBuilder>, IListBuilder, ICompressorBuilder<IListBuilder> Methods | Improve this Doc View Source Build<T>() Builds an IListOperator<T> to read or write to lists containing type T . Declaration public IListOperator<T> Build<T>() Returns Type Description IListOperator <T> An IListOperator<T> . Type Parameters Name Description T The data type stored in the list. | Improve this Doc View Source Build<T>(String) Builds an IList<T> to allow access to a single list containing type T with the provided key and a default bin name. Declaration public IList<T> Build<T>(string key) Parameters Type Name Description System.String key The record key containing the list. Returns Type Description IList <T> An IList<T> . Type Parameters Name Description T The data type stored in the list. | Improve this Doc View Source Build<T>(String, String) Builds an IList<T> to allow access to a single list containing type T with the provided key and bin name. Declaration public IList<T> Build<T>(string key, string bin) Parameters Type Name Description System.String key The record key containing the list. System.String bin Record bin where list is stored. Returns Type Description IList <T> An IList<T> . Type Parameters Name Description T The data type stored in the list. | Improve this Doc View Source Configure(IClientProvider) Configures an IListBuilder . Declaration public static IDataContextBuilder<ISerializerBuilder<IListBuilder>> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A IClientProvider instance. Returns Type Description IDataContextBuilder < ISerializerBuilder < IListBuilder >> An IListBuilder . | Improve this Doc View Source UseLZ4() Uses the default AeroSharp.Compression.LZ4Compressor . Declaration public IListBuilder UseLZ4() Returns Type Description IListBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializer() Use the built-in AeroSharp.Serialization.MessagePackSerializer . Declaration public IListBuilder UseMessagePackSerializer() Returns Type Description IListBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializerWithLz4Compression() Use the built-in AeroSharp.Serialization.MessagePackSerializerWithCompression . Declaration public IListBuilder UseMessagePackSerializerWithLz4Compression() Returns Type Description IListBuilder An instance of the next builder. | Improve this Doc View Source UseProtobufSerializer() Use the default AeroSharp.Serialization.ProtobufSerializer . Declaration public IListBuilder UseProtobufSerializer() Returns Type Description IListBuilder An instance of the next builder. | Improve this Doc View Source WithCompressor(ICompressor) Use a provided instance of an ICompressor . Declaration public IListBuilder WithCompressor(ICompressor compressor) Parameters Type Name Description ICompressor compressor The ICompressor instance. Returns Type Description IListBuilder An instance of the next builder. | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration public ISerializerBuilder<IListBuilder> WithDataContext(DataContext context) Parameters Type Name Description DataContext context Returns Type Description ISerializerBuilder < IListBuilder > An instance of the next builder. | Improve this Doc View Source WithListConfiguration(ListConfiguration) Optional: Provide a ListConfiguration with different settings than the default. Declaration public IListBuilder WithListConfiguration(ListConfiguration listConfiguration) Parameters Type Name Description ListConfiguration listConfiguration A WriteConfiguration . Returns Type Description IListBuilder A IListBuilder . | Improve this Doc View Source WithSerializer(ISerializer) Use a provided instance of an ISerializer . Declaration public IListBuilder WithSerializer(ISerializer serializer) Parameters Type Name Description ISerializer serializer The ISerializer instance. Returns Type Description IListBuilder An instance of the next builder. | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration public IListBuilder WithWriteConfiguration(WriteConfiguration configuration) Parameters Type Name Description WriteConfiguration configuration Returns Type Description IListBuilder A IListBuilder . Implements IDataContextBuilder<TNextBuilder> ISerializerBuilder<TNextBuilder> IListBuilder ICompressorBuilder<TNextBuilder>"
  },
  "api/AeroSharp.MapBuilder.html": {
    "href": "api/AeroSharp.MapBuilder.html",
    "title": "Class MapBuilder | AeroSharp",
    "keywords": "Class MapBuilder An interface for building an IMap<TKey, TValue> for interacting with a single map, or a IMapOperator<TKey, TValue> for interacting with multiple maps with the same key and value types. Inheritance System.Object MapBuilder Implements IDataContextBuilder < IMapBuilder > IMapBuilder ISerializerBuilder < IMapBuilder > Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public sealed class MapBuilder : object, IDataContextBuilder<IMapBuilder>, IMapBuilder, ISerializerBuilder<IMapBuilder> Methods | Improve this Doc View Source Build<TKey, TValue>() Declaration public IMapOperator<TKey, TValue> Build<TKey, TValue>() Returns Type Description IMapOperator <TKey, TValue> Type Parameters Name Description TKey TValue | Improve this Doc View Source Build<TKey, TValue>(String) Declaration public IMap<TKey, TValue> Build<TKey, TValue>(string key) Parameters Type Name Description System.String key Returns Type Description IMap <TKey, TValue> Type Parameters Name Description TKey TValue | Improve this Doc View Source Build<TKey, TValue>(String, String) Declaration public IMap<TKey, TValue> Build<TKey, TValue>(string key, string bin) Parameters Type Name Description System.String key System.String bin Returns Type Description IMap <TKey, TValue> Type Parameters Name Description TKey TValue | Improve this Doc View Source Configure(IClientProvider) Configures an IMapBuilder . Declaration public static IDataContextBuilder<IMapBuilder> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A IClientProvider instance. Returns Type Description IDataContextBuilder < IMapBuilder > An IMapBuilder . | Improve this Doc View Source UseMessagePackSerializer() Declaration public IMapBuilder UseMessagePackSerializer() Returns Type Description IMapBuilder | Improve this Doc View Source UseMessagePackSerializerWithLz4Compression() Declaration public IMapBuilder UseMessagePackSerializerWithLz4Compression() Returns Type Description IMapBuilder | Improve this Doc View Source UseProtobufSerializer() Declaration public IMapBuilder UseProtobufSerializer() Returns Type Description IMapBuilder | Improve this Doc View Source WithDataContext(DataContext) Declaration public IMapBuilder WithDataContext(DataContext dataContext) Parameters Type Name Description DataContext dataContext Returns Type Description IMapBuilder | Improve this Doc View Source WithMapConfiguration(MapConfiguration) Declaration public IMapBuilder WithMapConfiguration(MapConfiguration mapConfiguration) Parameters Type Name Description MapConfiguration mapConfiguration Returns Type Description IMapBuilder | Improve this Doc View Source WithSerializer(ISerializer) Declaration public IMapBuilder WithSerializer(ISerializer serializer) Parameters Type Name Description ISerializer serializer Returns Type Description IMapBuilder | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Declaration public IMapBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration Returns Type Description IMapBuilder Implements IDataContextBuilder<TNextBuilder> IMapBuilder ISerializerBuilder<TNextBuilder>"
  },
  "api/AeroSharp.OperatorBuilder.html": {
    "href": "api/AeroSharp.OperatorBuilder.html",
    "title": "Class OperatorBuilder | AeroSharp",
    "keywords": "Class OperatorBuilder Configures and builds an IOperator for executing multi-operation transactions on a single record. Inheritance System.Object OperatorBuilder Implements IDataContextBuilder < ISerializerBuilder < IOperatorBuilder >> ISerializerBuilder < IOperatorBuilder > IOperatorBuilder ICompressorBuilder < IOperatorBuilder > Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public class OperatorBuilder : object, IDataContextBuilder<ISerializerBuilder<IOperatorBuilder>>, ISerializerBuilder<IOperatorBuilder>, IOperatorBuilder, ICompressorBuilder<IOperatorBuilder> Methods | Improve this Doc View Source Build() Creates a new IOperator instance with the previously set properties. Declaration public IOperator Build() Returns Type Description IOperator A IOperator instance. | Improve this Doc View Source Configure(IClientProvider) Configure a new IOperatorBuilder . Declaration public static IDataContextBuilder<ISerializerBuilder<IOperatorBuilder>> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A IClientProvider instance. Returns Type Description IDataContextBuilder < ISerializerBuilder < IOperatorBuilder >> A IOperatorBuilder . | Improve this Doc View Source UseLZ4() Uses the default AeroSharp.Compression.LZ4Compressor . Declaration public IOperatorBuilder UseLZ4() Returns Type Description IOperatorBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializer() Use the built-in AeroSharp.Serialization.MessagePackSerializer . Declaration public IOperatorBuilder UseMessagePackSerializer() Returns Type Description IOperatorBuilder An instance of the next builder. | Improve this Doc View Source UseMessagePackSerializerWithLz4Compression() Use the built-in AeroSharp.Serialization.MessagePackSerializerWithCompression . Declaration public IOperatorBuilder UseMessagePackSerializerWithLz4Compression() Returns Type Description IOperatorBuilder An instance of the next builder. | Improve this Doc View Source UseProtobufSerializer() Use the default AeroSharp.Serialization.ProtobufSerializer . Declaration public IOperatorBuilder UseProtobufSerializer() Returns Type Description IOperatorBuilder An instance of the next builder. | Improve this Doc View Source WithCompressor(ICompressor) Use a provided instance of an ICompressor . Declaration public IOperatorBuilder WithCompressor(ICompressor compressor) Parameters Type Name Description ICompressor compressor The ICompressor instance. Returns Type Description IOperatorBuilder An instance of the next builder. | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration public ISerializerBuilder<IOperatorBuilder> WithDataContext(DataContext dataAccessContext) Parameters Type Name Description DataContext dataAccessContext Returns Type Description ISerializerBuilder < IOperatorBuilder > An instance of the next builder. | Improve this Doc View Source WithSerializer(ISerializer) Use a provided instance of an ISerializer . Declaration public IOperatorBuilder WithSerializer(ISerializer serializer) Parameters Type Name Description ISerializer serializer The ISerializer instance. Returns Type Description IOperatorBuilder An instance of the next builder. | Improve this Doc View Source WithWriteConfiguration(WriteConfiguration) Optional: Provide a WriteConfiguration with different settings than the default. Declaration public IOperatorBuilder WithWriteConfiguration(WriteConfiguration writeConfiguration) Parameters Type Name Description WriteConfiguration writeConfiguration A WriteConfiguration . Returns Type Description IOperatorBuilder A IOperatorBuilder . Implements IDataContextBuilder<TNextBuilder> ISerializerBuilder<TNextBuilder> IOperatorBuilder ICompressorBuilder<TNextBuilder>"
  },
  "api/AeroSharp.Plugins.html": {
    "href": "api/AeroSharp.Plugins.html",
    "title": "Namespace AeroSharp.Plugins | AeroSharp",
    "keywords": "Namespace AeroSharp.Plugins Interfaces IKeyValueStorePlugin This interface defines hooks for IKeyValueStore read and write operations."
  },
  "api/AeroSharp.Plugins.IKeyValueStorePlugin.html": {
    "href": "api/AeroSharp.Plugins.IKeyValueStorePlugin.html",
    "title": "Interface IKeyValueStorePlugin | AeroSharp",
    "keywords": "Interface IKeyValueStorePlugin This interface defines hooks for IKeyValueStore read and write operations. Namespace : AeroSharp.Plugins Assembly : AeroSharp.dll Syntax public interface IKeyValueStorePlugin Methods | Improve this Doc View Source OnReadAsync(DataContext, String[], String[], Type[], CancellationToken) Called just before the start of a read operation. Declaration Task OnReadAsync(DataContext dataContext, string[] keys, string[] binNames, Type[] types, CancellationToken cancellationToken) Parameters Type Name Description DataContext dataContext The current data context (i.e. namespace and set). System.String [] keys The keys being read. System.String [] binNames The bin names being read, in the same order as types . Type [] types The types of data be read, in the same order as bins . CancellationToken cancellationToken A cancellation token. Returns Type Description Task A Task. | Improve this Doc View Source OnReadCompletedAsync(DataContext, IEnumerable<KeyValuePair<String, Record>>, String[], Type[], TimeSpan, CancellationToken) Called just after the read operation has completed. Declaration Task OnReadCompletedAsync(DataContext dataContext, IEnumerable<KeyValuePair<string, Record>> keys, string[] binNames, Type[] types, TimeSpan duration, CancellationToken cancellationToken) Parameters Type Name Description DataContext dataContext The current data context (i.e. namespace and set). IEnumerable < KeyValuePair < System.String , Record >> keys The keys being read and whether or not the record exists. System.String [] binNames The bin names being read, in the same order as types and byteCount . Type [] types The types of data be read, in the same order as bins and byteCount . TimeSpan duration The time it took to complete the operation. CancellationToken cancellationToken A cancellation token. Returns Type Description Task A Task. | Improve this Doc View Source OnWriteAsync(DataContext, String, Bin[], Type[], CancellationToken) Called just before the start of a write operation. Declaration Task OnWriteAsync(DataContext dataContext, string key, Bin[] bins, Type[] types, CancellationToken cancellationToken) Parameters Type Name Description DataContext dataContext The current data context (i.e. namespace and set). System.String key The key being written. Bin [] bins The bins being written, in the same order as types and byteCount . Type [] types The types of data be written, in the same order as bins and byteCount . CancellationToken cancellationToken A cancellation token. Returns Type Description Task A Task. | Improve this Doc View Source OnWriteCompletedAsync(DataContext, String, Bin[], Type[], TimeSpan, CancellationToken) Called when the write operation has completed. Declaration Task OnWriteCompletedAsync(DataContext dataContext, string key, Bin[] bins, Type[] types, TimeSpan duration, CancellationToken cancellationToken) Parameters Type Name Description DataContext dataContext The current data context (i.e. namespace and set). System.String key The key being written. Bin [] bins The bins being written, in the same order as types and byteCount . Type [] types The types of data be written, in the same order as bins and byteCount . TimeSpan duration The time it took to complete the operation. CancellationToken cancellationToken A cancellation token. Returns Type Description Task A Task."
  },
  "api/AeroSharp.Serialization.html": {
    "href": "api/AeroSharp.Serialization.html",
    "title": "Namespace AeroSharp.Serialization | AeroSharp",
    "keywords": "Namespace AeroSharp.Serialization Classes SerializationException A class for wrapping serialization exceptions. Interfaces ISerializer"
  },
  "api/AeroSharp.Serialization.ISerializer.html": {
    "href": "api/AeroSharp.Serialization.ISerializer.html",
    "title": "Interface ISerializer | AeroSharp",
    "keywords": "Interface ISerializer Namespace : AeroSharp.Serialization Assembly : AeroSharp.dll Syntax public interface ISerializer Methods | Improve this Doc View Source Deserialize<T>(Byte[]) Declaration T Deserialize<T>(byte[] serializedData) Parameters Type Name Description System.Byte [] serializedData Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Serialize<T>(T) Declaration byte[] Serialize<T>(T data) Parameters Type Name Description T data Returns Type Description System.Byte [] Type Parameters Name Description T"
  },
  "api/AeroSharp.Serialization.SerializationException.html": {
    "href": "api/AeroSharp.Serialization.SerializationException.html",
    "title": "Class SerializationException | AeroSharp",
    "keywords": "Class SerializationException A class for wrapping serialization exceptions. Inheritance System.Object SerializationException Namespace : AeroSharp.Serialization Assembly : AeroSharp.dll Syntax public class SerializationException : Exception Constructors | Improve this Doc View Source SerializationException() Create a new instance of the SerializationException class. Declaration public SerializationException() | Improve this Doc View Source SerializationException(String) Create a new instance of the SerializationException class. Declaration public SerializationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this Doc View Source SerializationException(String, Exception) Create a new instance of the SerializationException class. Declaration public SerializationException(string message, Exception inner) Parameters Type Name Description System.String message The exception message. Exception inner The inner ."
  },
  "api/AeroSharp.SetTruncatorBuilder.html": {
    "href": "api/AeroSharp.SetTruncatorBuilder.html",
    "title": "Class SetTruncatorBuilder | AeroSharp",
    "keywords": "Class SetTruncatorBuilder A class for building an ISetTruncator . Inheritance System.Object SetTruncatorBuilder Implements IDataContextBuilder < ISetTruncatorBuilder > ISetTruncatorBuilder Namespace : AeroSharp Assembly : AeroSharp.dll Syntax public class SetTruncatorBuilder : object, IDataContextBuilder<ISetTruncatorBuilder>, ISetTruncatorBuilder Methods | Improve this Doc View Source Build() Creates a new ISetTruncator instance with the previously set properties. Declaration public ISetTruncator Build() Returns Type Description ISetTruncator A ISetTruncator instance. | Improve this Doc View Source Configure(IClientProvider) Configure a new SetTruncatorBuilder . Declaration public static IDataContextBuilder<ISetTruncatorBuilder> Configure(IClientProvider clientProvider) Parameters Type Name Description IClientProvider clientProvider A IClientProvider instance. Returns Type Description IDataContextBuilder < ISetTruncatorBuilder > A IDataContextBuilder<TNextBuilder> instance. | Improve this Doc View Source WithDataContext(DataContext) Use the provided DataContext (i.e. namespace and set). Declaration public ISetTruncatorBuilder WithDataContext(DataContext context) Parameters Type Name Description DataContext context Returns Type Description ISetTruncatorBuilder An instance of the next builder. | Improve this Doc View Source WithInfoConfiguration(InfoConfiguration) Sets the optional InfoConfiguration if it needs values different from the default. Declaration public ISetTruncatorBuilder WithInfoConfiguration(InfoConfiguration infoConfiguration) Parameters Type Name Description InfoConfiguration infoConfiguration An InfoConfiguration . Returns Type Description ISetTruncatorBuilder A ISetTruncatorBuilder . Implements IDataContextBuilder<TNextBuilder> ISetTruncatorBuilder"
  },
  "api/AeroSharp.Utilities.CollectionExtensions.html": {
    "href": "api/AeroSharp.Utilities.CollectionExtensions.html",
    "title": "Class CollectionExtensions | AeroSharp",
    "keywords": "Class CollectionExtensions Inheritance System.Object CollectionExtensions Namespace : AeroSharp.Utilities Assembly : AeroSharp.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source Batch<T>(IEnumerable<T>, Int32) Declaration public static IEnumerable<T[]> Batch<T>(this IEnumerable<T> collection, int batchSize) Parameters Type Name Description IEnumerable <T> collection System.Int32 batchSize Returns Type Description IEnumerable <T[]> Type Parameters Name Description T | Improve this Doc View Source BatchNoMultipleEnumeration<T>(IEnumerable<T>, Func<IList<T>, IEnumerable<T>>, Int32) Declaration public static IEnumerable<T> BatchNoMultipleEnumeration<T>(this IEnumerable<T> input, Func<IList<T>, IEnumerable<T>> function, int batchSize = 1000) Parameters Type Name Description IEnumerable <T> input Func < IList <T>, IEnumerable <T>> function System.Int32 batchSize Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/AeroSharp.Utilities.html": {
    "href": "api/AeroSharp.Utilities.html",
    "title": "Namespace AeroSharp.Utilities | AeroSharp",
    "keywords": "Namespace AeroSharp.Utilities Classes CollectionExtensions ReadModifyWritePolicy ReadModifyWritePolicyFactory A way to build | handle Generation Exceptions when writing to Aerospike Interfaces IReadModifyWritePolicy"
  },
  "api/AeroSharp.Utilities.IReadModifyWritePolicy.html": {
    "href": "api/AeroSharp.Utilities.IReadModifyWritePolicy.html",
    "title": "Interface IReadModifyWritePolicy | AeroSharp",
    "keywords": "Interface IReadModifyWritePolicy Namespace : AeroSharp.Utilities Assembly : AeroSharp.dll Syntax public interface IReadModifyWritePolicy Methods | Improve this Doc View Source Create(ReadModifyWritePolicy) Factory method to create a new Write with Generation exception policy via Polly Declaration AsyncRetryPolicy Create(ReadModifyWritePolicy policyConfig) Parameters Type Name Description ReadModifyWritePolicy policyConfig The GenerationExceptionPolicy to pass in to Polly Returns Type Description AsyncRetryPolicy Polly AsyncRetryPolicy"
  },
  "api/AeroSharp.Utilities.ReadModifyWritePolicy.html": {
    "href": "api/AeroSharp.Utilities.ReadModifyWritePolicy.html",
    "title": "Class ReadModifyWritePolicy | AeroSharp",
    "keywords": "Class ReadModifyWritePolicy Inheritance System.Object ReadModifyWritePolicy Namespace : AeroSharp.Utilities Assembly : AeroSharp.dll Syntax public class ReadModifyWritePolicy : object Constructors | Improve this Doc View Source ReadModifyWritePolicy() Creates a new instance of a GenerationExceptionPolicy with default parameters Declaration public ReadModifyWritePolicy() Properties | Improve this Doc View Source MaxRetries How many times we want to retry writing to Aerospike via the RMW pattern Declaration public int MaxRetries { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source WaitTimeInMilliseconds How long to wait in between writes Declaration public int WaitTimeInMilliseconds { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source WithExponentialBackoff Determines whether or not we want to allow exp. backoff when retrying writes. Declaration public bool WithExponentialBackoff { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AeroSharp.Utilities.ReadModifyWritePolicyFactory.html": {
    "href": "api/AeroSharp.Utilities.ReadModifyWritePolicyFactory.html",
    "title": "Class ReadModifyWritePolicyFactory | AeroSharp",
    "keywords": "Class ReadModifyWritePolicyFactory A way to build | handle Generation Exceptions when writing to Aerospike Inheritance System.Object ReadModifyWritePolicyFactory Implements IReadModifyWritePolicy Namespace : AeroSharp.Utilities Assembly : AeroSharp.dll Syntax public class ReadModifyWritePolicyFactory : object, IReadModifyWritePolicy Constructors | Improve this Doc View Source ReadModifyWritePolicyFactory() Initializes a new instance of the ReadModifyWritePolicyFactory class. Declaration public ReadModifyWritePolicyFactory() Methods | Improve this Doc View Source Create(ReadModifyWritePolicy) Factory method to create a new Write with Generation exception policy via Polly Declaration public AsyncRetryPolicy Create(ReadModifyWritePolicy policyConfig) Parameters Type Name Description ReadModifyWritePolicy policyConfig The GenerationExceptionPolicy to pass in to Polly Returns Type Description AsyncRetryPolicy Polly AsyncRetryPolicy Implements IReadModifyWritePolicy"
  },
  "index.html": {
    "href": "index.html",
    "title": "AeroSharp Docs | AeroSharp",
    "keywords": "AeroSharp Docs Getting Started Client Provider Serialization Data Context Data Access Types Configuration KeyValueStore List Operator General SetTruncator KeyOperator Getting Started If you're not familiar with Aerospike, take a look at the official documentation before using this library. In this library, access to data stored in Aerospike (e.g. blobs or lists ) generally involves two steps: building a client provider that specifies how connections to Aerospike are established (e.g. cluster connection strings, credentials), and building a data access object that provides an easy-to-use interface for interacting with the Aerospike database. In general, you should only need to build one client provider and the underlying Aerospike client will maintain connections to all nodes in the Aerospike cluster. Once a client provider is built, you can then build a variety of data access objects to store and retrieve your various data types in Aerospike. For example, this code builds a client provider that connects to a local instance of Aerospike and then writes and reads a blob of a custom data type (via KeyValueStore ) and appends a few items to a list (via List ). var clientProvider = ClientProviderBuilder .Configure() .WithBootstrapServers(new string[] { \"localhost\" }) .WithoutCredentials() .Build(); // Only do this once. var keyValueStore = KeyValueStoreBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .Build<MyDataType>(); await keyValueStore.WriteAsync(\"record_key\", new MyDataType(\"some data\"), CancellationToken.None); KeyValuePair<string, MyDataType> keyValueResult = await keyValueStore.ReadAsync(\"record_key\", CancellationToken.None); // keyValueResult contains [ Key = \"record_key\", Value = MyDataType(\"some data\") ] var list = ListBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .WithKey(\"list_record_key\") .Build<MyDataType>(); await list.AppendAsync(new MyDataType(\"list item 1\"), CancellationToken.None); await list.AppendAsync(new MyDataType(\"list item 2\"), CancellationToken.None); IEnumerable<MyDataType> listResult = await list.ReadAllAsync(CancellationToken.None); // listResult contains [ MyDataType(\"list item 1\"), MyDataType(\"list item 2\") ] Client Provider Aerospike provides a client that maintains a pool of connections to an Aerospike cluster. The client needs to know the location of at least one node in the cluster and can discover the remaining nodes. The client can also accept username/password credentials as well as other parameters (e.g. connection timeout). This library uses a client provider to give the data access objects access to an Aerospike client. Use the ClientProviderBuilder to configure and build a client provider, e.g.: var clientProvider = ClientProviderBuilder .Configure() .WithBootstrapServers(new string[] { \"localhost\" }) .WithUsernameAndPassword(\"my_username\", \"my_password\") .WithConnectionConfiguration(new ConnectionConfiguration { ConnectionTimeout = TimeSpan.FromMinutes(1) }) .Build(); WithBootstrapServers(...) is shorthand for WithConnectionContext(...) that assumes a default port (3000). WithConnectionConfiguration is optional and exposes ClientPolicy parameters, with the exception of the username and password credentials which we require in a separate configuration step. ❗ In most cases you only need one client provider! The underlying Aerospike client is thread-safe and will maintain connection threads for your entire parallel/concurrent application. You can store a reference to your client provider in a singleton or register it as such with your DI container, for example. Implementing IClientProvider You may need to implement custom connection logic, such as falling back to a separate Aerospike cluster when feature toggle is toggled. You can achieve this by implementing the IClientProvider interface and passing your client provider to the data access object builders' Configure(...) method. The recommended approach is to use ClientProviderBuilder to build the various connections that you will need, and put them in a wrapper that implements IClientProvider . Keep in mind that connections are not established until the first request is made , so you can safely build client providers in advance without actually connecting to any Aerospike cluster. If you must construct your own AerospikeClient or AsyncClient , keep in mind that the client providers return an instance of ClientWrapper . ClientWrapper simply accepts an Aerospike client in its constructor and only exposes it to internal classes. Serialization The goal of this library is to provide performant access to Aerospike in such a way that makes it hard to corrupt your data or find yourself reading unexpected bytes. This is accomplished by factoring out as many request parameters as possible into one-time configuration of data access objects; and by handling the serialization of your data types under the hood. We provide built-in serializers: MessagePack ProtoBuf Custom serializers can also be provided by implementing ISerializer . Using built-in serializers In general, to use built-in components call builder methods like UseMessagePackSerializer() or UseProtobufSerializer() . Both of these built-in libraries feature C# contract definitions via attributes. For example, you can define your serializable data types like this: // MessagePack [MessagePackObject] class MyType { [Key(0)] public int Value { get; set; } [Key(1)] public string Text { get; set; } } // Protobuf [ProtoContract] class MyType { [ProtoMember(1)] public int Value { get; set; } [ProtoMember(2)] public string Text { get; set; } } Based on some benchmarking, we recommend using MessagePack. Compressors After serialization, the resulting bytes can be compressed (or otherwise transformed) by supplying an ICompressor . We provide built-in compressors: LZ4 Data Context Most data access types require a data context. The data context is simply the namespace and set that the object will access, and is generally configured with WithDataContext(new DataContext(\"namespace\", \"set\")) . ⚠️ Aerospike sets are created the first time you write to them, so care should be taken before writing new data to production. ⚠️ There's nothing stopping you from writing to a set that isn't configured with its own credentials. So, be sure you never accidentally write to anyone else's set! Data Access Types The goal of this library is to provide performant access to Aerospike in such a way that makes it hard to corrupt your data or find yourself reading unexpected bytes. This is accomplished by factoring out as many request parameters as possible into one-time configuration of data access objects; and by handling the serialization of your data types under the hood. Each data access type is designed to suit a different access pattern. Configuration Aerospike offers many different request behaviors that are configurable through policies . This library uses configuration objects (e.g. ReadConfiguration , WriteConfiguration ) to expose policy parameters. These are generally configured with builder methods, e.g.: var keyValueStore = KeyValueStoreBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .WithReadConfiguration(new ReadConfiguration { RetryCount = 2, // ...set other configuration parameters or leave them as their default values }) .Build<MyDataType>(); // Access to one bin with a default bin name Supplying a configuration object is optional--default values will work for development in most cases and can be tuned when your service is nearing production. Configuration overrides In some cases, certain requests may require a different configuration than what was provided when the data access object was built. In these cases, configurations can be overridden using .Override() . This feature is currently only implemented on the KeyValueStore data access type. For example: var keyValueStore = KeyValueStoreBuilder.Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .WithWriteConfiguration(new WriteConfiguration { RecordExistsAction = RecordExistsAction.CreateOnly }) .Build<MyType>(); // Do things that only operate on non-existent keys ... // Override to operate once on keys that already exist await keyValueStore .Override((WriteConfiguration config) => { // `config` object has values from initial configuration--only set parameters that need to change config.RecordExistsAction = RecordExistsAction.UpdateOnly; return config; }) .WriteAsync(\"key\", value, token); KeyValueStore IKeyValueStore<T> provides a simple interface for writing data as blobs to Aerospike records and reading them back in batches. For example: await keyValueStore.WriteAsync(\"record_key_1\", myData1, CancellationToken.None); await keyValueStore.WriteAsync(\"record_key_2\", myData2, CancellationToken.None); var result = await keyValueStore.ReadAsync(new [] { \"record_key_1\", \"record_key_2\" }, CancellationToken.None); // result is an array of key-value pairs containing { \"record_key_1\", myData1 } and { \"record_key_2\", myData2 } This interface comes in two flavors: one more safe and one more flexible. The safe version is configured with a data type and a bin, and it will only read or write data of that type from the specified bin. In our experience, this is most common usage of key-value storage in Aerospike. The flexible version can read or write data of any type in any bin. \"Safe\" KeyValueStore access Often, different parts of your code need to only read or write data of a single type (such as a repository class). In these cases, configure a KeyValueStore access object to read or write only that type of data. Configure a key-value store data access object with KeyValueStoreBuilder : var keyValueStore = KeyValueStoreBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .Build<MyDataType>(); // Access to one bin with a default name // Write some data MyDataType data = ... // get data to write from somewhere await keyValueStore.WriteAsync(\"some_key\", data, cancellationToken); // Read the data var readResult = keyValuestore.ReadAsync(\"some_key\", cancellationToken); // readResult is a key-value pair of type <string, MyDataType> The final call to Build<T> is overloaded to use a default bin name or a given bin name. This interface currently supports access of up to three bins. For example: // Configure a KeyValueStore to operate on two bins var keyValueStore = KeyValueStoreBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .Build<MyDataType, OtherType>(); // Write some data MyDataType data = ... // get data to write from somewhere OtherType otherData = ... // get some more data await keyValueStore.WriteAsync(\"some_key\", data, otherData, cancellationToken); // Read the data var readResult = keyValuestore.ReadAsync(\"some_key\", cancellationToken); // readResult contains a tuple of type (string, MyDataType, OtherType) where the first item is the record key A tangent on Aerospike bins Are you sure you need more than one bin? Bins are not SQL columns. That is, you can't relate records using values in bins. If you are only ever reading and writing one bin per request, you can just as easily write your data into different records. One common approach is to build key prefixes that differentiate between the different data types stored in a set. i.e., my_service.birthday.Will my_service.favorite_food.Will my_service.favorite_color.Will In this example, data for Will is stored in three records. If you have a complex object with many properties and you only want to read and write it as a whole, just serialize that object into one bin. You can combine different data types by building a wrapper class to contain them both, or use a value tuple (e.g. .Build<(MyDataType, MyOtherDataType)>() ). Keep in mind that Aerospike records have a size limit. Breaking your data into mutiple records is not only easy to do, but it may save you a headache down the road when your data size starts to grow. \"Flexible\" KeyValueStore access IKeyValueStore provides a more flexible interface that allows you to specify the data type and bin per read and write operation. In cases where you have a diverse set of data types to store in Aerospike that are related to some common behavior (i.e. accessed from the same place in your code), configure a flexible KeyValueStore by omitting the type parameter when calling Build() : var keyValueStore = KeyValueStoreBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .Build(); // Write some data MyDataType data = ... // get data to write from somewhere await keyValueStore.WriteAsync(\"some_key\", \"bin\", data, cancellationToken); // Generic parameter is inferred // Read the data var readResult = keyValuestore.ReadAsync<MyDataType>(\"some_key\", \"bin\", cancellationToken); // readResult is a key-value pair of type <string, MyDataType> Read-Modify-Write Transactions The Read-Modify-Write approach is designed to permit reading a record into memory, updating it, and then writing it with changes in a thread-safe, transactional manner. We do this by performing the write only if the generation is equal to that at the time of the read. If there was an interim change, the write will fail and the entire Read-Write-Modify transaction pattern may be retried. KeyValueStoreBuilder allows for providing a ReadModifyWritePolicy to configure the retry behavior: var readModifyWritePolicy = new ReadModifyWritePolicy { MaxRetries = 5, WaitTimeInMilliseconds = 10, WithExponentialBackoff = true }; var keyValueStore = KeyValueStoreBuilder .Configure(_clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .WithReadModifyWriteConfiguration(readModifyWritePolicy) .Build<MyType>(\"some_bin\"); The KeyValueStore can then be used to ReadModifyWriteAsync . Note that this requires the user to specify both an addOperation and updateOperation , like so: var addOperation = new Func<MyType>(() => { return new MyType { Text = \"Hello!\", Value = 2 }; }); var updateOperation = new Func<MyType, MyType>((x) => { x.Value += 2; return x; }); await keyValueStore.ReadModifyWriteAsync( \"some_key\", addOperation, updateOperation, timeToLive: TimeSpan.FromHours(5), CancellationToken.None ); This mimics the AddOrUpdate method on the ConcurrentDictionary object in C#. In this way, the user does not have to care whether the record already exists or not: the library will handle creating or updating the record appropriately. Plugins The IKeyValueStorePlugin interface allows you to write hooks to execute on read or write actions, like so: public class MyKeyValueStorePlugin : IKeyValueStorePlugin { public Task OnWriteCompletedAsync(DataContext dataContext, string key, Bin[] bins, Type[] types, TimeSpan duration, CancellationToken cancellationToken) { return textLogger.WriteAsync($\"Successfully wrote to {dataContext.Set}!\"); } ... } Custom plugin(s) can then be used by adding them to the KeyValueStore during configuration: var keyValueStore = KeyValueStoreBuilder.Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .WithPlugin(myPlugin) .Build<MyType>(); List The list interfaces provide access to an Aerospike List . To access a single list, build an IList<T> and provide the record key where the list will be stored: var list = ListBuilder.Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .Build<TestType>(\"list_record_key\"); // A bin name can also be specified here To operate on multiple lists that contain the same data type, build an IListOperator<T> by omitting the key when building, i.e: var listOperator = ListBuilder.Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializer() .Build<TestType>(); ReadAll() Both available interfaces accept a generic type during configuration (and therefore only operate on one type of list) in order to avoid mixing data types in a single list. To illustrate the problem, consider the ReadAll() method that returns all items in a list. Without knowing the size of the list, it must deserialize every item into some data type. If an item of a different type is accidentally added to the list, it will be impossible to deserialize without handling the different type specially. The interfaces are designed to (hopefully) prevent this from happening. If a complex data structure involving lists with multiple types is needed, use the Operator data access object. Operator The IOperator interface allows you to build and execute multi-operation transactions on a single record. Generally, this wraps the client.Operate functionality provided by Aerospike. IOperator currently only supports reading one result from a arbitrarily long list of operations. i.e., you may perform multiple operations at once (e.g. remove an item from a list in one bin, add an item to a list in another bin), but only retrieve one piece of data back (e.g. get the size of the second list). For example: // Configure an operator _operator = OperatorBuilder .Configure(clientProvider) .WithDataContext(new DataContext(\"my_namespace\", \"my_set\")) .UseMessagePackSerializerWithLz4Compression() .Build(); var list2Size = await _operator.Key(RecordKey) // The record you're operating on .List.RemoveByValue(\"list_1_bin\", listItem) .List.Append(\"list_2_bin\", listItem) .SizeAsync(\"list_2_bin\", cancellationToken); // Return the result of the \"size\" operation Set Scans Using the ISetScanner interface, you're able to scan all records in a specified namespace and set. This means you can iterate through every record, its key (see Caveat below) and value(s). For example (flexible interface): // Use the 'flexible' scanner interface. var scanner = SetScannerBuilder.Configure(myClientProvider) .WithDataContext(myDataContext) .WithSerializer(mySerializer) .WithScanConfiguration(myConfig) .Build(); // Write each fetched key to the console. scanner.ScanSet(key => Console.WriteLine(key)); or using the strongly typed interface: // Use the 'strongly-typed' scanner interface. var scanner = SetScannerBuilder.Configure(myClientProvider) .WithDataContext(myDataContext) .WithSerializer(mySerializer) .WithScanConfiguration(myConfig) .Build<MyCoolClass>(\"my_cool_bin_name\"); // Write each fetched key to the console. scanner.ScanSet((key, record) => Console.WriteLine(key)); Caveat Key retrieval requires that sendKey was set to true when the record was written to Aerospike . Otherwise, the string key isn't stored in Aerospike and all we'll have access to is the digest. General The general interfaces include the SetTruncator and the KeyOperator. As the name implies, the SetTruncator is for removing all records in a set. The KeyOperator is for interacting with records by their key. As stated above, a client provider must be provided to the KeyOperatorBuilder or the SetTruncatorBuilder. SetTruncator ⚠️ Use With Caution! ⚠️ The SetTruncator is for quickly truncating all records contained in a namespace/set. It gets the namespace and set from the DataContext passed into the SetTruncatorBuilder. Removing records using the SetTruncator is many orders of magnitude faster than deleting records one at a time. You can either remove all records in a set using the TruncateSet method with no parameters, or a DateTime can be specified for removing records before the last update time. KeyOperator The KeyOperator provides a way for interacting by key with records that are already in Aerospike. The KeyOperator exposes methods to reset a record's time to live, delete a record, or check if a record exists. Similar to the set truncator , a KeyOperator is created using the KeyOperatorBuilder, and a client provider and DataContext must be provided."
  }
}